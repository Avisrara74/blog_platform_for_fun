{"ast":null,"code":"'use strict';\n\nfunction processString(options) {\n  var key = 0;\n\n  function processInputWithRegex(option, input) {\n    if (!option.fn || typeof option.fn !== 'function') return input;\n    if (!option.regex || !(option.regex instanceof RegExp)) return input;\n\n    if (typeof input === 'string') {\n      var regex = option.regex;\n      var result = null;\n      var output = [];\n\n      while ((result = regex.exec(input)) !== null) {\n        var index = result.index;\n        var match = result[0];\n        output.push(input.substring(0, index));\n        output.push(option.fn(++key, result));\n        input = input.substring(index + match.length, input.length + 1);\n        regex.lastIndex = 0;\n      }\n\n      output.push(input);\n      return output;\n    } else if (Array.isArray(input)) {\n      return input.map(function (chunk) {\n        return processInputWithRegex(option, chunk);\n      });\n    } else return input;\n  }\n\n  return function (input) {\n    if (!options || !Array.isArray(options) || !options.length) return input;\n    options.forEach(function (option) {\n      return input = processInputWithRegex(option, input);\n    });\n    return input;\n  };\n}\n\nmodule.exports = processString;","map":{"version":3,"sources":["C:/Users/stalk/jm-blog-platform/node_modules/react-process-string/dist/index.js"],"names":["processString","options","key","processInputWithRegex","option","input","fn","regex","RegExp","result","output","exec","index","match","push","substring","length","lastIndex","Array","isArray","map","chunk","forEach","module","exports"],"mappings":"AAAA;;AAEA,SAASA,aAAT,CAAuBC,OAAvB,EAAgC;AAC5B,MAAIC,GAAG,GAAG,CAAV;;AAEA,WAASC,qBAAT,CAA+BC,MAA/B,EAAuCC,KAAvC,EAA8C;AAC1C,QAAI,CAACD,MAAM,CAACE,EAAR,IAAc,OAAOF,MAAM,CAACE,EAAd,KAAqB,UAAvC,EAAmD,OAAOD,KAAP;AAEnD,QAAI,CAACD,MAAM,CAACG,KAAR,IAAiB,EAAEH,MAAM,CAACG,KAAP,YAAwBC,MAA1B,CAArB,EAAwD,OAAOH,KAAP;;AAExD,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,UAAIE,KAAK,GAAGH,MAAM,CAACG,KAAnB;AACA,UAAIE,MAAM,GAAG,IAAb;AACA,UAAIC,MAAM,GAAG,EAAb;;AAEA,aAAO,CAACD,MAAM,GAAGF,KAAK,CAACI,IAAN,CAAWN,KAAX,CAAV,MAAiC,IAAxC,EAA8C;AAC1C,YAAIO,KAAK,GAAGH,MAAM,CAACG,KAAnB;AACA,YAAIC,KAAK,GAAGJ,MAAM,CAAC,CAAD,CAAlB;AAEAC,QAAAA,MAAM,CAACI,IAAP,CAAYT,KAAK,CAACU,SAAN,CAAgB,CAAhB,EAAmBH,KAAnB,CAAZ;AACAF,QAAAA,MAAM,CAACI,IAAP,CAAYV,MAAM,CAACE,EAAP,CAAU,EAAEJ,GAAZ,EAAiBO,MAAjB,CAAZ;AAEAJ,QAAAA,KAAK,GAAGA,KAAK,CAACU,SAAN,CAAgBH,KAAK,GAAGC,KAAK,CAACG,MAA9B,EAAsCX,KAAK,CAACW,MAAN,GAAe,CAArD,CAAR;AACAT,QAAAA,KAAK,CAACU,SAAN,GAAkB,CAAlB;AACH;;AAEDP,MAAAA,MAAM,CAACI,IAAP,CAAYT,KAAZ;AACA,aAAOK,MAAP;AACH,KAlBD,MAkBO,IAAIQ,KAAK,CAACC,OAAN,CAAcd,KAAd,CAAJ,EAA0B;AAC7B,aAAOA,KAAK,CAACe,GAAN,CAAU,UAAUC,KAAV,EAAiB;AAC9B,eAAOlB,qBAAqB,CAACC,MAAD,EAASiB,KAAT,CAA5B;AACH,OAFM,CAAP;AAGH,KAJM,MAIA,OAAOhB,KAAP;AACV;;AAED,SAAO,UAAUA,KAAV,EAAiB;AACpB,QAAI,CAACJ,OAAD,IAAY,CAACiB,KAAK,CAACC,OAAN,CAAclB,OAAd,CAAb,IAAuC,CAACA,OAAO,CAACe,MAApD,EAA4D,OAAOX,KAAP;AAE5DJ,IAAAA,OAAO,CAACqB,OAAR,CAAgB,UAAUlB,MAAV,EAAkB;AAC9B,aAAOC,KAAK,GAAGF,qBAAqB,CAACC,MAAD,EAASC,KAAT,CAApC;AACH,KAFD;AAIA,WAAOA,KAAP;AACH,GARD;AASH;;AAEDkB,MAAM,CAACC,OAAP,GAAiBxB,aAAjB","sourcesContent":["'use strict';\n\nfunction processString(options) {\n    var key = 0;\n\n    function processInputWithRegex(option, input) {\n        if (!option.fn || typeof option.fn !== 'function') return input;\n\n        if (!option.regex || !(option.regex instanceof RegExp)) return input;\n\n        if (typeof input === 'string') {\n            var regex = option.regex;\n            var result = null;\n            var output = [];\n\n            while ((result = regex.exec(input)) !== null) {\n                var index = result.index;\n                var match = result[0];\n\n                output.push(input.substring(0, index));\n                output.push(option.fn(++key, result));\n\n                input = input.substring(index + match.length, input.length + 1);\n                regex.lastIndex = 0;\n            }\n\n            output.push(input);\n            return output;\n        } else if (Array.isArray(input)) {\n            return input.map(function (chunk) {\n                return processInputWithRegex(option, chunk);\n            });\n        } else return input;\n    }\n\n    return function (input) {\n        if (!options || !Array.isArray(options) || !options.length) return input;\n\n        options.forEach(function (option) {\n            return input = processInputWithRegex(option, input);\n        });\n\n        return input;\n    };\n}\n\nmodule.exports = processString;\n\n"]},"metadata":{},"sourceType":"script"}