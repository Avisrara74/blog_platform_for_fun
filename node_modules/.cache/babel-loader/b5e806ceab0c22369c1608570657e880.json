{"ast":null,"code":"import axios from 'axios';\nimport * as routes from './routes';\nimport { checkFieldErrors, mainRequestHandler, networkErrorCheck, signInErrorsCheck } from './index';\naxios.interceptors.request.use(req => mainRequestHandler(req)); // авторизация\n\nexport const signInProcess = async (userData, formik) => {\n  try {\n    const response = await axios.post(routes.signInUrl, userData);\n    const responseUserData = response.data.user;\n    return {\n      username: responseUserData.username,\n      token: responseUserData.token,\n      isAuthorized: true,\n      userProfileImage: responseUserData.image\n    };\n  } catch (error) {\n    networkErrorCheck(error);\n\n    if (error.response.status === 422) {\n      signInErrorsCheck(error.response.data.errors, formik);\n    }\n\n    throw error;\n  }\n}; // регистрация\n\nexport const signUpProcess = async (newUser, formik) => {\n  try {\n    await axios.post(routes.signUpUrl, newUser);\n    alert('Регистрация прошла успешно'); // eslint-disable-line no-alert\n  } catch (error) {\n    networkErrorCheck(error);\n\n    if (error.response.status === 422) {\n      checkFieldErrors(error.response.data.errors, formik);\n    }\n\n    throw error;\n  }\n};","map":{"version":3,"sources":["C:/Users/stalk/jm-blog-platform/src/API/auth.js"],"names":["axios","routes","checkFieldErrors","mainRequestHandler","networkErrorCheck","signInErrorsCheck","interceptors","request","use","req","signInProcess","userData","formik","response","post","signInUrl","responseUserData","data","user","username","token","isAuthorized","userProfileImage","image","error","status","errors","signUpProcess","newUser","signUpUrl","alert"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,MAAZ,MAAwB,UAAxB;AACA,SACEC,gBADF,EAEEC,kBAFF,EAGEC,iBAHF,EAIEC,iBAJF,QAKO,SALP;AAOAL,KAAK,CAACM,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACGC,GAAD,IAASN,kBAAkB,CAACM,GAAD,CAD7B,E,CAIA;;AACA,OAAO,MAAMC,aAAa,GAAG,OAAOC,QAAP,EAAiBC,MAAjB,KAA4B;AACvD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,IAAN,CAAWb,MAAM,CAACc,SAAlB,EAA6BJ,QAA7B,CAAvB;AACA,UAAMK,gBAAgB,GAAGH,QAAQ,CAACI,IAAT,CAAcC,IAAvC;AACA,WAAO;AACLC,MAAAA,QAAQ,EAAEH,gBAAgB,CAACG,QADtB;AAELC,MAAAA,KAAK,EAAEJ,gBAAgB,CAACI,KAFnB;AAGLC,MAAAA,YAAY,EAAE,IAHT;AAILC,MAAAA,gBAAgB,EAAEN,gBAAgB,CAACO;AAJ9B,KAAP;AAMD,GATD,CASE,OAAOC,KAAP,EAAc;AACdpB,IAAAA,iBAAiB,CAACoB,KAAD,CAAjB;;AACA,QAAIA,KAAK,CAACX,QAAN,CAAeY,MAAf,KAA0B,GAA9B,EAAmC;AACjCpB,MAAAA,iBAAiB,CAACmB,KAAK,CAACX,QAAN,CAAeI,IAAf,CAAoBS,MAArB,EAA6Bd,MAA7B,CAAjB;AACD;;AACD,UAAMY,KAAN;AACD;AACF,CAjBM,C,CAmBP;;AACA,OAAO,MAAMG,aAAa,GAAG,OAAOC,OAAP,EAAgBhB,MAAhB,KAA2B;AACtD,MAAI;AACF,UAAMZ,KAAK,CAACc,IAAN,CAAWb,MAAM,CAAC4B,SAAlB,EAA6BD,OAA7B,CAAN;AACAE,IAAAA,KAAK,CAAC,4BAAD,CAAL,CAFE,CAEmC;AACtC,GAHD,CAGE,OAAON,KAAP,EAAc;AACdpB,IAAAA,iBAAiB,CAACoB,KAAD,CAAjB;;AACA,QAAIA,KAAK,CAACX,QAAN,CAAeY,MAAf,KAA0B,GAA9B,EAAmC;AACjCvB,MAAAA,gBAAgB,CAACsB,KAAK,CAACX,QAAN,CAAeI,IAAf,CAAoBS,MAArB,EAA6Bd,MAA7B,CAAhB;AACD;;AACD,UAAMY,KAAN;AACD;AACF,CAXM","sourcesContent":["import axios from 'axios';\nimport * as routes from './routes';\nimport {\n  checkFieldErrors,\n  mainRequestHandler,\n  networkErrorCheck,\n  signInErrorsCheck,\n} from './index';\n\naxios.interceptors.request.use(\n  (req) => mainRequestHandler(req),\n);\n\n// авторизация\nexport const signInProcess = async (userData, formik) => {\n  try {\n    const response = await axios.post(routes.signInUrl, userData);\n    const responseUserData = response.data.user;\n    return {\n      username: responseUserData.username,\n      token: responseUserData.token,\n      isAuthorized: true,\n      userProfileImage: responseUserData.image,\n    };\n  } catch (error) {\n    networkErrorCheck(error);\n    if (error.response.status === 422) {\n      signInErrorsCheck(error.response.data.errors, formik);\n    }\n    throw error;\n  }\n};\n\n// регистрация\nexport const signUpProcess = async (newUser, formik) => {\n  try {\n    await axios.post(routes.signUpUrl, newUser);\n    alert('Регистрация прошла успешно'); // eslint-disable-line no-alert\n  } catch (error) {\n    networkErrorCheck(error);\n    if (error.response.status === 422) {\n      checkFieldErrors(error.response.data.errors, formik);\n    }\n    throw error;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}