{"ast":null,"code":"import axios from 'axios';\nimport { uniqueId } from 'lodash';\nimport * as routes from './routes';\nimport { checkFieldErrors, networkErrorCheck, mainRequestHandler } from './index';\naxios.interceptors.request.use(req => mainRequestHandler(req)); // получаем список статей частями (подробнее см. redux/actions/articles getArticles)\n\nexport const getArticles = async (articlesPerRequest, articlesCounter) => {\n  // counter увеличивается на кол-во полученных статей после каждого вызова функции из экшена\n  const localRequestHandler = req => {\n    req.params = {\n      limit: articlesPerRequest,\n      offset: articlesCounter\n    };\n    return req;\n  }; // инициализируем чтобы удалить после запроса\n\n\n  const requestInterceptor = axios.interceptors.request.use(req => localRequestHandler(req));\n\n  try {\n    const response = await axios.get(routes.articlesUrl);\n    const {\n      articles,\n      articlesCount\n    } = response.data;\n    const initialArticlesById = articles.map(el => ({ ...el,\n      id: uniqueId(),\n      tagList: el.tagList.map(tagName => ({\n        id: uniqueId(),\n        title: tagName\n      }))\n    }));\n    const articlesArray = [...initialArticlesById]; // удаляем интерцептор\n\n    axios.interceptors.request.eject(requestInterceptor);\n    return {\n      articles: articlesArray,\n      articlesCount\n    };\n  } catch (error) {\n    networkErrorCheck(error);\n    throw error;\n  }\n}; // создание поста\n\nexport const createArticle = async (articleBody, formik) => {\n  try {\n    const response = await axios.post(routes.articlesUrl, articleBody);\n    const {\n      article\n    } = response.data;\n    return { ...article,\n      id: uniqueId(),\n      tagList: article.tagList.map(tagName => ({\n        id: uniqueId(),\n        title: tagName\n      }))\n    };\n  } catch (error) {\n    networkErrorCheck(error);\n\n    if (error.response.status === 422) {\n      checkFieldErrors(error.response.data.errors, formik);\n    }\n\n    throw error;\n  }\n}; // запрос 1 поста\n// eslint-disable-next-line consistent-return\n\nexport const getOneArticle = async queryParam => {\n  try {\n    const url = routes.oneArticleUrl(queryParam);\n    const response = await axios.get(url);\n    const {\n      article\n    } = response.data;\n    return { ...article,\n      id: uniqueId(),\n      tagList: article.tagList.map(tagName => ({\n        id: uniqueId(),\n        title: tagName\n      }))\n    };\n  } catch (error) {\n    networkErrorCheck(error);\n  }\n}; // изменить пост\n\nexport const editArticle = async (articleBody, queryParam, formik) => {\n  try {\n    const url = routes.oneArticleUrl(queryParam);\n    await axios.put(url, articleBody);\n  } catch (error) {\n    networkErrorCheck(error);\n\n    if (error.response.status === 422) {\n      checkFieldErrors(error.response.data.errors, formik);\n    }\n  }\n}; // лайкнуть пост\n// eslint-disable-next-line consistent-return\n\nexport const addLike = async likeBody => {\n  const {\n    id,\n    slug,\n    favorited\n  } = likeBody;\n\n  try {\n    // лайк или дизлайк в зависимости от текущего состояния\n    const response = favorited === true ? await axios.delete(routes.changeLikeUrl(slug)) : await axios.post(routes.changeLikeUrl(slug));\n    return {\n      isFavorited: response.data.article.favorited,\n      id\n    };\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.log(error.response);\n  }\n}; // удалить пост\n\nexport const removeArticle = async queryParam => {\n  const url = routes.oneArticleUrl(queryParam);\n  await axios.delete(url);\n};","map":{"version":3,"sources":["C:/Users/stalk/jm-blog-platform/src/API/articles.js"],"names":["axios","uniqueId","routes","checkFieldErrors","networkErrorCheck","mainRequestHandler","interceptors","request","use","req","getArticles","articlesPerRequest","articlesCounter","localRequestHandler","params","limit","offset","requestInterceptor","response","get","articlesUrl","articles","articlesCount","data","initialArticlesById","map","el","id","tagList","tagName","title","articlesArray","eject","error","createArticle","articleBody","formik","post","article","status","errors","getOneArticle","queryParam","url","oneArticleUrl","editArticle","put","addLike","likeBody","slug","favorited","delete","changeLikeUrl","isFavorited","console","log","removeArticle"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { uniqueId } from 'lodash';\nimport * as routes from './routes';\nimport { checkFieldErrors, networkErrorCheck, mainRequestHandler } from './index';\n\naxios.interceptors.request.use(\n  (req) => mainRequestHandler(req),\n);\n\n// получаем список статей частями (подробнее см. redux/actions/articles getArticles)\nexport const getArticles = async (articlesPerRequest, articlesCounter) => {\n  // counter увеличивается на кол-во полученных статей после каждого вызова функции из экшена\n  const localRequestHandler = (req) => {\n    req.params = { limit: articlesPerRequest, offset: articlesCounter };\n    return req;\n  };\n\n  // инициализируем чтобы удалить после запроса\n  const requestInterceptor = axios.interceptors.request.use(\n    (req) => localRequestHandler(req),\n  );\n\n  try {\n    const response = await axios.get(routes.articlesUrl);\n\n    const { articles, articlesCount } = response.data;\n\n    const initialArticlesById = articles.map((el) => ({\n      ...el,\n      id: uniqueId(),\n      tagList: el.tagList.map((tagName) => ({ id: uniqueId(), title: tagName })),\n    }));\n    const articlesArray = [...initialArticlesById];\n\n    // удаляем интерцептор\n    axios.interceptors.request.eject(requestInterceptor);\n\n    return {\n      articles: articlesArray,\n      articlesCount,\n    };\n  } catch (error) {\n    networkErrorCheck(error);\n    throw error;\n  }\n};\n\n// создание поста\nexport const createArticle = async (articleBody, formik) => {\n  try {\n    const response = await axios.post(routes.articlesUrl, articleBody);\n\n    const { article } = response.data;\n\n    return {\n      ...article,\n      id: uniqueId(),\n      tagList: article.tagList.map((tagName) => ({ id: uniqueId(), title: tagName })),\n    };\n  } catch (error) {\n    networkErrorCheck(error);\n    if (error.response.status === 422) {\n      checkFieldErrors(error.response.data.errors, formik);\n    }\n    throw error;\n  }\n};\n\n// запрос 1 поста\n// eslint-disable-next-line consistent-return\nexport const getOneArticle = async (queryParam) => {\n  try {\n    const url = routes.oneArticleUrl(queryParam);\n    const response = await axios.get(url);\n\n    const { article } = response.data;\n\n    return {\n      ...article,\n      id: uniqueId(),\n      tagList: article.tagList.map((tagName) => ({ id: uniqueId(), title: tagName })),\n    };\n  } catch (error) {\n    networkErrorCheck(error);\n  }\n};\n\n// изменить пост\nexport const editArticle = async (articleBody, queryParam, formik) => {\n  try {\n    const url = routes.oneArticleUrl(queryParam);\n    await axios.put(url, articleBody);\n  } catch (error) {\n    networkErrorCheck(error);\n    if (error.response.status === 422) {\n      checkFieldErrors(error.response.data.errors, formik);\n    }\n  }\n};\n\n// лайкнуть пост\n// eslint-disable-next-line consistent-return\nexport const addLike = async (likeBody) => {\n  const { id, slug, favorited } = likeBody;\n  try {\n    // лайк или дизлайк в зависимости от текущего состояния\n    const response = (favorited === true)\n      ? await axios.delete(routes.changeLikeUrl(slug))\n      : await axios.post(routes.changeLikeUrl(slug));\n\n    return {\n      isFavorited: response.data.article.favorited,\n      id,\n    };\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.log(error.response);\n  }\n};\n\n// удалить пост\nexport const removeArticle = async (queryParam) => {\n  const url = routes.oneArticleUrl(queryParam);\n  await axios.delete(url);\n};\n"]},"metadata":{},"sourceType":"module"}