{"ast":null,"code":"import axios from 'axios';\nimport * as routes from './routes'; // проверка на ошибки в полях\n\nexport const checkFieldErrors = (errResponse, formik) => {\n  Object.entries(errResponse).forEach(error => {\n    const [field, message] = error;\n    formik.setFieldError(field, message);\n    formik.setSubmitting(false);\n  });\n}; // проверка на ошибку сети\n\nexport const networkErrorCheck = err => {\n  if (err.message === 'Network Error') {\n    alert('Ошибка соединения'); // eslint-disable-line no-alert\n  }\n}; // проверка ошибки авторизации\n\nexport const signInErrorsCheck = (errResponse, formik) => {\n  if (Object.keys(errResponse).length > 0) {\n    formik.setFieldError('email', 'Invalid login or password');\n    formik.setFieldError('password', 'Invalid login or password');\n    formik.setSubmitting(false);\n  }\n};\nconst httpHeader = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json;charset=utf-8'\n  },\n  json: true\n}; // авторизация\n\nexport const signInProcess = async (userData, formik) => {\n  const successHandler = response => {\n    console.log(response);\n    return response;\n  };\n\n  const errorHandler = error => {\n    console.log(error.response);\n    return Promise.reject(error);\n  };\n\n  axios.interceptors.response.use(response => successHandler(response), error => errorHandler(error));\n\n  try {\n    const response = await axios({ ...httpHeader,\n      data: JSON.stringify(userData),\n      url: routes.signInUrl\n    });\n    const responseUserData = response.data.user;\n    return {\n      username: responseUserData.username,\n      token: responseUserData.token,\n      isAuthorized: true,\n      userProfileImage: responseUserData.image\n    };\n  } catch (err) {\n    networkErrorCheck(err);\n    signInErrorsCheck(err.response.data.errors, formik);\n    throw err;\n  }\n}; // регистрация\n\nexport const signUpProcess = async (newUser, formik) => {\n  try {\n    await axios({ ...httpHeader,\n      data: JSON.stringify(newUser),\n      url: routes.signUpUrl\n    });\n    alert('Регистрация прошла успешно'); // eslint-disable-line no-alert\n\n    formik.resetForm();\n  } catch (err) {\n    networkErrorCheck(err);\n    checkFieldErrors(err.response.data.errors, formik);\n    throw err;\n  }\n};","map":{"version":3,"sources":["C:/Users/stalk/jm-blog-platform/src/API/index.js"],"names":["axios","routes","checkFieldErrors","errResponse","formik","Object","entries","forEach","error","field","message","setFieldError","setSubmitting","networkErrorCheck","err","alert","signInErrorsCheck","keys","length","httpHeader","method","headers","json","signInProcess","userData","successHandler","response","console","log","errorHandler","Promise","reject","interceptors","use","data","JSON","stringify","url","signInUrl","responseUserData","user","username","token","isAuthorized","userProfileImage","image","errors","signUpProcess","newUser","signUpUrl","resetForm"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport * as routes from './routes';\n\n// проверка на ошибки в полях\nexport const checkFieldErrors = (errResponse, formik) => {\n  Object.entries(errResponse).forEach((error) => {\n    const [field, message] = error;\n    formik.setFieldError(field, message);\n    formik.setSubmitting(false);\n  });\n};\n\n// проверка на ошибку сети\nexport const networkErrorCheck = (err) => {\n  if (err.message === 'Network Error') {\n    alert('Ошибка соединения'); // eslint-disable-line no-alert\n  }\n};\n\n// проверка ошибки авторизации\nexport const signInErrorsCheck = (errResponse, formik) => {\n  if (Object.keys(errResponse).length > 0) {\n    formik.setFieldError('email', 'Invalid login or password');\n    formik.setFieldError('password', 'Invalid login or password');\n    formik.setSubmitting(false);\n  }\n};\n\nconst httpHeader = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json;charset=utf-8',\n  },\n  json: true,\n};\n\n// авторизация\nexport const signInProcess = async (userData, formik) => {\n\n\n\n  const successHandler = (response) => {\n    console.log(response);\n    return response;\n  }\n\n  const errorHandler = (error) => {\n    console.log(error.response);\n    return Promise.reject(error);\n  }\n\n  axios.interceptors.response.use(\n    (response) => successHandler(response),\n    (error) => errorHandler(error),\n  );\n\n  try {\n    const response = await axios({\n      ...httpHeader,\n      data: JSON.stringify(userData),\n      url: routes.signInUrl,\n    });\n\n    const responseUserData = response.data.user;\n\n    return {\n      username: responseUserData.username,\n      token: responseUserData.token,\n      isAuthorized: true,\n      userProfileImage: responseUserData.image,\n    };\n  } catch (err) {\n    networkErrorCheck(err);\n    signInErrorsCheck(err.response.data.errors, formik);\n    throw err;\n  }\n};\n\n// регистрация\nexport const signUpProcess = async (newUser, formik) => {\n  try {\n    await axios({\n      ...httpHeader,\n      data: JSON.stringify(newUser),\n      url: routes.signUpUrl,\n    });\n    alert('Регистрация прошла успешно'); // eslint-disable-line no-alert\n    formik.resetForm();\n  } catch (err) {\n    networkErrorCheck(err);\n    checkFieldErrors(err.response.data.errors, formik);\n    throw err;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}