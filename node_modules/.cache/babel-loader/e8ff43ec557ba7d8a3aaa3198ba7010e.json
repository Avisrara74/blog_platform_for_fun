{"ast":null,"code":"import axios from 'axios';\nimport * as routes from './routes';\nimport { uniqueId } from 'lodash'; // проверка на ошибки в полях\n\nexport const checkFieldErrors = (errResponse, formik) => {\n  Object.entries(errResponse).forEach(error => {\n    const [field, message] = error;\n    formik.setFieldError(field, message[0]);\n    formik.setSubmitting(false);\n  });\n}; // проверка на ошибку сети\n\nexport const networkErrorCheck = err => {\n  if (err.message === 'Network Error') {\n    alert('Ошибка соединения'); // eslint-disable-line no-alert\n  }\n}; // проверка ошибки авторизации\n\nexport const signInErrorsCheck = (errResponse, formik) => {\n  if (Object.keys(errResponse).length > 0) {\n    formik.setFieldError('email', 'Invalid login or password');\n    formik.setFieldError('password', 'Invalid login or password');\n    formik.setSubmitting(false);\n  }\n};\n\nconst mainRequestHandler = req => {\n  req.headers['Content-Type'] = 'application/json;charset=utf-8';\n  req.json = true;\n  return req;\n};\n\naxios.interceptors.request.use(req => mainRequestHandler(req)); // авторизация\n\nexport const signInProcess = async (userData, formik) => {\n  try {\n    const response = await axios.post(routes.signInUrl, userData);\n    const responseUserData = response.data.user;\n    return {\n      username: responseUserData.username,\n      token: responseUserData.token,\n      isAuthorized: true,\n      userProfileImage: responseUserData.image\n    };\n  } catch (error) {\n    networkErrorCheck(error);\n\n    if (error.response.status === 422) {\n      signInErrorsCheck(error.response.data.errors, formik);\n    }\n\n    throw error;\n  }\n}; // регистрация\n\nexport const signUpProcess = async (newUser, formik) => {\n  try {\n    await axios.post(routes.signUpUrl, newUser);\n    alert('Регистрация прошла успешно'); // eslint-disable-line no-alert\n  } catch (error) {\n    networkErrorCheck(error);\n\n    if (error.response.status === 422) {\n      checkFieldErrors(error.response.data.errors, formik);\n    }\n\n    throw error;\n  }\n}; // получаем список статей с помощью агрегации\n\nexport const getArticles = async (articlesPerRequest, articlesCounter) => {\n  // counter увеличивается на кол-во полученных статей после каждого вызова функции из экшена\n  const localRequestHandler = (req, counter) => {\n    console.log(counter);\n    req.params = {\n      limit: articlesPerRequest,\n      offset: counter\n    };\n    console.log(req);\n    return req;\n  };\n\n  try {\n    axios.interceptors.request.use(req => localRequestHandler(req, articlesCounter));\n    const response = await axios.get(routes.getArticlesUrl);\n    const {\n      articles,\n      articlesCount\n    } = response.data;\n    const initialArticlesById = articles.map(el => ({ ...el,\n      id: uniqueId(),\n      tagList: el.tagList.map(tagName => ({\n        id: uniqueId(),\n        title: tagName\n      }))\n    }));\n    const articlesArray = [...initialArticlesById];\n    return {\n      articles: articlesArray,\n      articlesCount\n    };\n  } catch (error) {\n    console.log(error);\n    throw error;\n  }\n};","map":{"version":3,"sources":["C:/Users/stalk/jm-blog-platform/src/API/index.js"],"names":["axios","routes","uniqueId","checkFieldErrors","errResponse","formik","Object","entries","forEach","error","field","message","setFieldError","setSubmitting","networkErrorCheck","err","alert","signInErrorsCheck","keys","length","mainRequestHandler","req","headers","json","interceptors","request","use","signInProcess","userData","response","post","signInUrl","responseUserData","data","user","username","token","isAuthorized","userProfileImage","image","status","errors","signUpProcess","newUser","signUpUrl","getArticles","articlesPerRequest","articlesCounter","localRequestHandler","counter","console","log","params","limit","offset","get","getArticlesUrl","articles","articlesCount","initialArticlesById","map","el","id","tagList","tagName","title","articlesArray"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,MAAZ,MAAwB,UAAxB;AACA,SAASC,QAAT,QAAyB,QAAzB,C,CAEA;;AACA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,WAAD,EAAcC,MAAd,KAAyB;AACvDC,EAAAA,MAAM,CAACC,OAAP,CAAeH,WAAf,EAA4BI,OAA5B,CAAqCC,KAAD,IAAW;AAC7C,UAAM,CAACC,KAAD,EAAQC,OAAR,IAAmBF,KAAzB;AACAJ,IAAAA,MAAM,CAACO,aAAP,CAAqBF,KAArB,EAA4BC,OAAO,CAAC,CAAD,CAAnC;AACAN,IAAAA,MAAM,CAACQ,aAAP,CAAqB,KAArB;AACD,GAJD;AAKD,CANM,C,CAQP;;AACA,OAAO,MAAMC,iBAAiB,GAAIC,GAAD,IAAS;AACxC,MAAIA,GAAG,CAACJ,OAAJ,KAAgB,eAApB,EAAqC;AACnCK,IAAAA,KAAK,CAAC,mBAAD,CAAL,CADmC,CACP;AAC7B;AACF,CAJM,C,CAMP;;AACA,OAAO,MAAMC,iBAAiB,GAAG,CAACb,WAAD,EAAcC,MAAd,KAAyB;AACxD,MAAIC,MAAM,CAACY,IAAP,CAAYd,WAAZ,EAAyBe,MAAzB,GAAkC,CAAtC,EAAyC;AACvCd,IAAAA,MAAM,CAACO,aAAP,CAAqB,OAArB,EAA8B,2BAA9B;AACAP,IAAAA,MAAM,CAACO,aAAP,CAAqB,UAArB,EAAiC,2BAAjC;AACAP,IAAAA,MAAM,CAACQ,aAAP,CAAqB,KAArB;AACD;AACF,CANM;;AAQP,MAAMO,kBAAkB,GAAIC,GAAD,IAAS;AAClCA,EAAAA,GAAG,CAACC,OAAJ,CAAY,cAAZ,IAA8B,gCAA9B;AACAD,EAAAA,GAAG,CAACE,IAAJ,GAAW,IAAX;AAEA,SAAOF,GAAP;AACD,CALD;;AAOArB,KAAK,CAACwB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACGL,GAAD,IAASD,kBAAkB,CAACC,GAAD,CAD7B,E,CAIA;;AACA,OAAO,MAAMM,aAAa,GAAG,OAAOC,QAAP,EAAiBvB,MAAjB,KAA4B;AACvD,MAAI;AACF,UAAMwB,QAAQ,GAAG,MAAM7B,KAAK,CAAC8B,IAAN,CAAW7B,MAAM,CAAC8B,SAAlB,EAA6BH,QAA7B,CAAvB;AACA,UAAMI,gBAAgB,GAAGH,QAAQ,CAACI,IAAT,CAAcC,IAAvC;AACA,WAAO;AACLC,MAAAA,QAAQ,EAAEH,gBAAgB,CAACG,QADtB;AAELC,MAAAA,KAAK,EAAEJ,gBAAgB,CAACI,KAFnB;AAGLC,MAAAA,YAAY,EAAE,IAHT;AAILC,MAAAA,gBAAgB,EAAEN,gBAAgB,CAACO;AAJ9B,KAAP;AAMD,GATD,CASE,OAAO9B,KAAP,EAAc;AACdK,IAAAA,iBAAiB,CAACL,KAAD,CAAjB;;AACA,QAAIA,KAAK,CAACoB,QAAN,CAAeW,MAAf,KAA0B,GAA9B,EAAmC;AACjCvB,MAAAA,iBAAiB,CAACR,KAAK,CAACoB,QAAN,CAAeI,IAAf,CAAoBQ,MAArB,EAA6BpC,MAA7B,CAAjB;AACD;;AACD,UAAMI,KAAN;AACD;AACF,CAjBM,C,CAmBP;;AACA,OAAO,MAAMiC,aAAa,GAAG,OAAOC,OAAP,EAAgBtC,MAAhB,KAA2B;AACtD,MAAI;AACF,UAAML,KAAK,CAAC8B,IAAN,CAAW7B,MAAM,CAAC2C,SAAlB,EAA6BD,OAA7B,CAAN;AACA3B,IAAAA,KAAK,CAAC,4BAAD,CAAL,CAFE,CAEmC;AACtC,GAHD,CAGE,OAAOP,KAAP,EAAc;AACdK,IAAAA,iBAAiB,CAACL,KAAD,CAAjB;;AACA,QAAIA,KAAK,CAACoB,QAAN,CAAeW,MAAf,KAA0B,GAA9B,EAAmC;AACjCrC,MAAAA,gBAAgB,CAACM,KAAK,CAACoB,QAAN,CAAeI,IAAf,CAAoBQ,MAArB,EAA6BpC,MAA7B,CAAhB;AACD;;AACD,UAAMI,KAAN;AACD;AACF,CAXM,C,CAaP;;AACA,OAAO,MAAMoC,WAAW,GAAG,OAAOC,kBAAP,EAA2BC,eAA3B,KAA+C;AACxE;AACA,QAAMC,mBAAmB,GAAG,CAAC3B,GAAD,EAAM4B,OAAN,KAAkB;AAC5CC,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA5B,IAAAA,GAAG,CAAC+B,MAAJ,GAAa;AAAEC,MAAAA,KAAK,EAAEP,kBAAT;AAA6BQ,MAAAA,MAAM,EAAEL;AAArC,KAAb;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY9B,GAAZ;AACA,WAAOA,GAAP;AACD,GALD;;AAOA,MAAI;AACFrB,IAAAA,KAAK,CAACwB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACGL,GAAD,IAAS2B,mBAAmB,CAAC3B,GAAD,EAAM0B,eAAN,CAD9B;AAGA,UAAMlB,QAAQ,GAAG,MAAM7B,KAAK,CAACuD,GAAN,CAAUtD,MAAM,CAACuD,cAAjB,CAAvB;AAEA,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA8B7B,QAAQ,CAACI,IAA7C;AAEA,UAAM0B,mBAAmB,GAAGF,QAAQ,CAACG,GAAT,CAAcC,EAAD,KAAS,EAChD,GAAGA,EAD6C;AAEhDC,MAAAA,EAAE,EAAE5D,QAAQ,EAFoC;AAGhD6D,MAAAA,OAAO,EAAEF,EAAE,CAACE,OAAH,CAAWH,GAAX,CAAgBI,OAAD,KAAc;AAAEF,QAAAA,EAAE,EAAE5D,QAAQ,EAAd;AAAkB+D,QAAAA,KAAK,EAAED;AAAzB,OAAd,CAAf;AAHuC,KAAT,CAAb,CAA5B;AAKA,UAAME,aAAa,GAAG,CAAC,GAAGP,mBAAJ,CAAtB;AAEA,WAAO;AACLF,MAAAA,QAAQ,EAAES,aADL;AAELR,MAAAA;AAFK,KAAP;AAID,GAnBD,CAmBE,OAAOjD,KAAP,EAAc;AACdyC,IAAAA,OAAO,CAACC,GAAR,CAAY1C,KAAZ;AACA,UAAMA,KAAN;AACD;AACF,CAhCM","sourcesContent":["import axios from 'axios';\nimport * as routes from './routes';\nimport { uniqueId } from 'lodash';\n\n// проверка на ошибки в полях\nexport const checkFieldErrors = (errResponse, formik) => {\n  Object.entries(errResponse).forEach((error) => {\n    const [field, message] = error;\n    formik.setFieldError(field, message[0]);\n    formik.setSubmitting(false);\n  });\n};\n\n// проверка на ошибку сети\nexport const networkErrorCheck = (err) => {\n  if (err.message === 'Network Error') {\n    alert('Ошибка соединения'); // eslint-disable-line no-alert\n  }\n};\n\n// проверка ошибки авторизации\nexport const signInErrorsCheck = (errResponse, formik) => {\n  if (Object.keys(errResponse).length > 0) {\n    formik.setFieldError('email', 'Invalid login or password');\n    formik.setFieldError('password', 'Invalid login or password');\n    formik.setSubmitting(false);\n  }\n};\n\nconst mainRequestHandler = (req) => {\n  req.headers['Content-Type'] = 'application/json;charset=utf-8';\n  req.json = true;\n\n  return req;\n};\n\naxios.interceptors.request.use(\n  (req) => mainRequestHandler(req),\n);\n\n// авторизация\nexport const signInProcess = async (userData, formik) => {\n  try {\n    const response = await axios.post(routes.signInUrl, userData);\n    const responseUserData = response.data.user;\n    return {\n      username: responseUserData.username,\n      token: responseUserData.token,\n      isAuthorized: true,\n      userProfileImage: responseUserData.image,\n    };\n  } catch (error) {\n    networkErrorCheck(error);\n    if (error.response.status === 422) {\n      signInErrorsCheck(error.response.data.errors, formik);\n    }\n    throw error;\n  }\n};\n\n// регистрация\nexport const signUpProcess = async (newUser, formik) => {\n  try {\n    await axios.post(routes.signUpUrl, newUser);\n    alert('Регистрация прошла успешно'); // eslint-disable-line no-alert\n  } catch (error) {\n    networkErrorCheck(error);\n    if (error.response.status === 422) {\n      checkFieldErrors(error.response.data.errors, formik);\n    }\n    throw error;\n  }\n};\n\n// получаем список статей с помощью агрегации\nexport const getArticles = async (articlesPerRequest, articlesCounter) => {\n  // counter увеличивается на кол-во полученных статей после каждого вызова функции из экшена\n  const localRequestHandler = (req, counter) => {\n    console.log(counter);\n    req.params = { limit: articlesPerRequest, offset: counter };\n    console.log(req);\n    return req;\n  };\n\n  try {\n    axios.interceptors.request.use(\n      (req) => localRequestHandler(req, articlesCounter),\n    );\n    const response = await axios.get(routes.getArticlesUrl);\n\n    const { articles, articlesCount } = response.data;\n\n    const initialArticlesById = articles.map((el) => ({\n      ...el,\n      id: uniqueId(),\n      tagList: el.tagList.map((tagName) => ({ id: uniqueId(), title: tagName })),\n    }));\n    const articlesArray = [...initialArticlesById];\n\n    return {\n      articles: articlesArray,\n      articlesCount,\n    };\n  } catch (error) {\n    console.log(error);\n    throw error;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}