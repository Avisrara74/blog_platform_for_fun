{"ast":null,"code":"import { createAction } from 'redux-actions';\nimport * as method from '../../API';\nexport const signUpRequest = createAction('SIGN_UP_REQUEST');\nexport const signUpSuccess = createAction('SIGN_UP_SUCCESS');\nexport const signUpFailure = createAction('SIGN_UP_FAILURE'); // регистрация\n\nexport const signUp = newUserData => async dispatch => {\n  dispatch(signUpRequest());\n\n  try {\n    await method.signUp(newUserData);\n    alert('Регистрация прошла успешно'); // eslint-disable-line no-alert\n\n    dispatch(signUpSuccess());\n  } catch (err) {\n    alert('Пользователь с таким email уже существует'); // eslint-disable-line no-alert\n\n    dispatch(signUpFailure());\n    throw err;\n  }\n};\nexport const signInRequest = createAction('LOG_IN_REQUEST');\nexport const signInSuccess = createAction('LOG_IN_SUCCESS');\nexport const signInFailure = createAction('LOG_IN_FAILURE'); // авторизация\n\nexport const signIn = userData => async dispatch => {\n  dispatch(signInRequest());\n\n  try {\n    const response = await method.signIn(userData);\n    const responseData = response.data.user;\n    const userResponseData = {\n      username: responseData.username,\n      token: responseData.token,\n      isAuthorized: true\n    };\n    dispatch(signInSuccess(userResponseData));\n  } catch (err) {\n    alert('Проверьте введённые данные'); // eslint-disable-line no-alert\n\n    dispatch(signInFailure());\n    throw err;\n  }\n};\nexport const logOutSuccess = createAction('LOGOUT_SUCCESS');","map":{"version":3,"sources":["C:/Users/stalk/jm-blog-platform/src/redux/actions/index.js"],"names":["createAction","method","signUpRequest","signUpSuccess","signUpFailure","signUp","newUserData","dispatch","alert","err","signInRequest","signInSuccess","signInFailure","signIn","userData","response","responseData","data","user","userResponseData","username","token","isAuthorized","logOutSuccess"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,OAAO,KAAKC,MAAZ,MAAwB,WAAxB;AAEA,OAAO,MAAMC,aAAa,GAAGF,YAAY,CAAC,iBAAD,CAAlC;AACP,OAAO,MAAMG,aAAa,GAAGH,YAAY,CAAC,iBAAD,CAAlC;AACP,OAAO,MAAMI,aAAa,GAAGJ,YAAY,CAAC,iBAAD,CAAlC,C,CAEP;;AACA,OAAO,MAAMK,MAAM,GAAIC,WAAD,IAAiB,MAAOC,QAAP,IAAoB;AACzDA,EAAAA,QAAQ,CAACL,aAAa,EAAd,CAAR;;AACA,MAAI;AACF,UAAMD,MAAM,CAACI,MAAP,CAAcC,WAAd,CAAN;AACAE,IAAAA,KAAK,CAAC,4BAAD,CAAL,CAFE,CAEmC;;AACrCD,IAAAA,QAAQ,CAACJ,aAAa,EAAd,CAAR;AACD,GAJD,CAIE,OAAOM,GAAP,EAAY;AACZD,IAAAA,KAAK,CAAC,2CAAD,CAAL,CADY,CACwC;;AACpDD,IAAAA,QAAQ,CAACH,aAAa,EAAd,CAAR;AACA,UAAMK,GAAN;AACD;AACF,CAXM;AAaP,OAAO,MAAMC,aAAa,GAAGV,YAAY,CAAC,gBAAD,CAAlC;AACP,OAAO,MAAMW,aAAa,GAAGX,YAAY,CAAC,gBAAD,CAAlC;AACP,OAAO,MAAMY,aAAa,GAAGZ,YAAY,CAAC,gBAAD,CAAlC,C,CAEP;;AACA,OAAO,MAAMa,MAAM,GAAIC,QAAD,IAAc,MAAOP,QAAP,IAAoB;AACtDA,EAAAA,QAAQ,CAACG,aAAa,EAAd,CAAR;;AACA,MAAI;AACF,UAAMK,QAAQ,GAAG,MAAMd,MAAM,CAACY,MAAP,CAAcC,QAAd,CAAvB;AACA,UAAME,YAAY,GAAGD,QAAQ,CAACE,IAAT,CAAcC,IAAnC;AACA,UAAMC,gBAAgB,GAAG;AACvBC,MAAAA,QAAQ,EAAEJ,YAAY,CAACI,QADA;AAEvBC,MAAAA,KAAK,EAAEL,YAAY,CAACK,KAFG;AAGvBC,MAAAA,YAAY,EAAE;AAHS,KAAzB;AAKAf,IAAAA,QAAQ,CAACI,aAAa,CAACQ,gBAAD,CAAd,CAAR;AACD,GATD,CASE,OAAOV,GAAP,EAAY;AACZD,IAAAA,KAAK,CAAC,4BAAD,CAAL,CADY,CACyB;;AACrCD,IAAAA,QAAQ,CAACK,aAAa,EAAd,CAAR;AACA,UAAMH,GAAN;AACD;AACF,CAhBM;AAkBP,OAAO,MAAMc,aAAa,GAAGvB,YAAY,CAAC,gBAAD,CAAlC","sourcesContent":["import { createAction } from 'redux-actions';\nimport * as method from '../../API';\n\nexport const signUpRequest = createAction('SIGN_UP_REQUEST');\nexport const signUpSuccess = createAction('SIGN_UP_SUCCESS');\nexport const signUpFailure = createAction('SIGN_UP_FAILURE');\n\n// регистрация\nexport const signUp = (newUserData) => async (dispatch) => {\n  dispatch(signUpRequest());\n  try {\n    await method.signUp(newUserData);\n    alert('Регистрация прошла успешно'); // eslint-disable-line no-alert\n    dispatch(signUpSuccess());\n  } catch (err) {\n    alert('Пользователь с таким email уже существует'); // eslint-disable-line no-alert\n    dispatch(signUpFailure());\n    throw err;\n  }\n};\n\nexport const signInRequest = createAction('LOG_IN_REQUEST');\nexport const signInSuccess = createAction('LOG_IN_SUCCESS');\nexport const signInFailure = createAction('LOG_IN_FAILURE');\n\n// авторизация\nexport const signIn = (userData) => async (dispatch) => {\n  dispatch(signInRequest());\n  try {\n    const response = await method.signIn(userData);\n    const responseData = response.data.user;\n    const userResponseData = {\n      username: responseData.username,\n      token: responseData.token,\n      isAuthorized: true,\n    };\n    dispatch(signInSuccess(userResponseData));\n  } catch (err) {\n    alert('Проверьте введённые данные'); // eslint-disable-line no-alert\n    dispatch(signInFailure());\n    throw err;\n  }\n};\n\nexport const logOutSuccess = createAction('LOGOUT_SUCCESS');\n"]},"metadata":{},"sourceType":"module"}