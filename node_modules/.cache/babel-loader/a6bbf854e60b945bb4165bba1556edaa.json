{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\stalk\\\\jm-blog-platform\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\stalk\\\\jm-blog-platform\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import{createAction}from'redux-actions';import*as api from'../../API/articles';export var getArticlesProcess=createAction('GET_ARTICLES_PROCESS');export var getArticlesSuccess=createAction('GET_ARTICLES_SUCCESS');// при запросе на сервер статьи возвращаются пачками размером articlesPerRequest\n// в ответе приходит { articles: [], articlesCount: value }\n// массив articles диспатчим, чтобы не ждать от сервера все статьи(вдруг их тысячи)\n// Каждую итерацию сравниваем уже полученное число статей и кол-во на сервере\n// если на сервере статьи еще есть, то на фоне делаем запросы для их получения\nexport var getArticles=function getArticles(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var currentArticlesCounter,fetchArticles;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:currentArticlesCounter=0;fetchArticles=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var articlesPerRequest,counter,response,articles,articlesCount,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:articlesPerRequest=_args.length>0&&_args[0]!==undefined?_args[0]:100;counter=_args.length>1&&_args[1]!==undefined?_args[1]:0;_context.next=4;return api.getArticles(articlesPerRequest,counter);case 4:response=_context.sent;articles=response.articles,articlesCount=response.articlesCount;dispatch(getArticlesProcess(articles));currentArticlesCounter+=articles.length;if(!(currentArticlesCounter<articlesCount)){_context.next=11;break;}_context.next=11;return fetchArticles(articlesPerRequest,currentArticlesCounter);case 11:if(currentArticlesCounter===articlesCount){dispatch(getArticlesSuccess());}case 12:case\"end\":return _context.stop();}}},_callee);}));return function fetchArticles(){return _ref2.apply(this,arguments);};}();_context2.next=4;return fetchArticles();case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x){return _ref.apply(this,arguments);};}();};// создать пост\nexport var createArticleRequest=createAction('CREATE_ARTICLE_REQUEST');export var createArticleSuccess=createAction('CREATE_ARTICLE_SUCCESS');export var createArticleFailure=createAction('CREATE_ARTICLE_FAILURE');export var createArticle=function createArticle(articleBody,formik){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:dispatch(createArticleRequest());_context3.prev=1;_context3.next=4;return api.createArticle(articleBody,formik);case 4:dispatch(createArticleSuccess());_context3.next=10;break;case 7:_context3.prev=7;_context3.t0=_context3[\"catch\"](1);dispatch(createArticleFailure());case 10:case\"end\":return _context3.stop();}}},_callee3,null,[[1,7]]);}));return function(_x2){return _ref3.apply(this,arguments);};}();};// запросить 1 пост\n// этот экшен нужен, чтобы загрузить пост просматриваемый пользователем\n// если он вбивает ссылку на пост в адресной строке\nexport var getOneArticleRequest=createAction('GET_ONE_ARTICLE_REQUEST');export var getOneArticleSuccess=createAction('GET_ONE_ARTICLE_SUCCESS');export var getOneArticleFailure=createAction('GET_ONE_ARTICLE_FAILURE');export var getOneArticle=function getOneArticle(queryParam){return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch){var response;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:dispatch(getOneArticleRequest());_context4.prev=1;_context4.next=4;return api.getOneArticle(queryParam);case 4:response=_context4.sent;dispatch(getOneArticleSuccess(response));_context4.next=12;break;case 8:_context4.prev=8;_context4.t0=_context4[\"catch\"](1);dispatch(getOneArticleFailure());throw _context4.t0;case 12:case\"end\":return _context4.stop();}}},_callee4,null,[[1,8]]);}));return function(_x3){return _ref4.apply(this,arguments);};}();};// изменить пост\nexport var editArticleRequest=createAction('EDIT_ARTICLE_REQUEST');export var editArticleSuccess=createAction('EDIT_ARTICLE_SUCCESS');export var editArticleFailure=createAction('EDIT_ARTICLE_FAILURE');export var editArticle=function editArticle(articleData,queryParam,formik){return/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch){return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:dispatch(editArticleRequest());_context5.prev=1;_context5.next=4;return api.editArticle(articleData,queryParam,formik);case 4:dispatch(editArticleSuccess());_context5.next=11;break;case 7:_context5.prev=7;_context5.t0=_context5[\"catch\"](1);dispatch(editArticleFailure);throw _context5.t0;case 11:case\"end\":return _context5.stop();}}},_callee5,null,[[1,7]]);}));return function(_x4){return _ref5.apply(this,arguments);};}();};// лайк поста\nexport var addLikeRequest=createAction('ADD_LIKE_REQUEST');export var addLikeSuccess=createAction('ADD_LIKE_SUCCESS');export var addLikeFailure=createAction('ADD_LIKE_FAILURE');export var refreshLikeInArticlesArray=createAction('REFRESH_LIKE_IN_ARTICLES_ARRAY');export var addLike=function addLike(likeBody){return/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(dispatch){var response;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:if(!likeBody.isRepeatedRequest){dispatch(refreshLikeInArticlesArray(likeBody.id));}// запрещаем отправку на сервер если лайк уже отправлен\nif(!likeBody.isAlreadyRequested){_context6.next=3;break;}return _context6.abrupt(\"return\");case 3:dispatch(addLikeRequest(likeBody.id));_context6.prev=4;_context6.next=7;return api.addLike(likeBody);case 7:response=_context6.sent;dispatch(addLikeSuccess(response));_context6.next=15;break;case 11:_context6.prev=11;_context6.t0=_context6[\"catch\"](4);dispatch(addLikeFailure());throw _context6.t0;case 15:case\"end\":return _context6.stop();}}},_callee6,null,[[4,11]]);}));return function(_x5){return _ref6.apply(this,arguments);};}();};// удалить пост\nexport var removeArticleRequest=createAction('REMOVE_ARTICLE_REQUEST');export var removeArticleSuccess=createAction('REMOVE_ARTICLE_SUCCESS');export var removeArticleFailure=createAction('REMOVE_ARTICLE_FAILURE');export var removeArticle=function removeArticle(queryParam){return/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(dispatch){return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:dispatch(removeArticleRequest());_context7.prev=1;_context7.next=4;return api.removeArticle(queryParam);case 4:dispatch(removeArticleSuccess());_context7.next=11;break;case 7:_context7.prev=7;_context7.t0=_context7[\"catch\"](1);dispatch(removeArticleFailure());throw _context7.t0;case 11:case\"end\":return _context7.stop();}}},_callee7,null,[[1,7]]);}));return function(_x6){return _ref7.apply(this,arguments);};}();};// обновить посты после создания нового поста / удаления / редактирования\nexport var refreshArticlesRequest=createAction('REFRESH_ARTICLES_REQUEST');// обновить список постов\nexport var refreshArticles=function refreshArticles(){return/*#__PURE__*/function(){var _ref8=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(dispatch){return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:dispatch(createArticleFailure());dispatch(refreshArticlesRequest());dispatch(editArticleFailure());dispatch(getOneArticleFailure());dispatch(removeArticleFailure());case 5:case\"end\":return _context8.stop();}}},_callee8);}));return function(_x7){return _ref8.apply(this,arguments);};}();};","map":{"version":3,"sources":["C:/Users/stalk/jm-blog-platform/src/redux/actions/articles.js"],"names":["createAction","api","getArticlesProcess","getArticlesSuccess","getArticles","dispatch","currentArticlesCounter","fetchArticles","articlesPerRequest","counter","response","articles","articlesCount","length","createArticleRequest","createArticleSuccess","createArticleFailure","createArticle","articleBody","formik","getOneArticleRequest","getOneArticleSuccess","getOneArticleFailure","getOneArticle","queryParam","editArticleRequest","editArticleSuccess","editArticleFailure","editArticle","articleData","addLikeRequest","addLikeSuccess","addLikeFailure","refreshLikeInArticlesArray","addLike","likeBody","isRepeatedRequest","id","isAlreadyRequested","removeArticleRequest","removeArticleSuccess","removeArticleFailure","removeArticle","refreshArticlesRequest","refreshArticles"],"mappings":"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","sourcesContent":["import { createAction } from 'redux-actions';\nimport * as api from '../../API/articles';\n\nexport const getArticlesProcess = createAction('GET_ARTICLES_PROCESS');\nexport const getArticlesSuccess = createAction('GET_ARTICLES_SUCCESS');\n// при запросе на сервер статьи возвращаются пачками размером articlesPerRequest\n// в ответе приходит { articles: [], articlesCount: value }\n// массив articles диспатчим, чтобы не ждать от сервера все статьи(вдруг их тысячи)\n// Каждую итерацию сравниваем уже полученное число статей и кол-во на сервере\n// если на сервере статьи еще есть, то на фоне делаем запросы для их получения\nexport const getArticles = () => async (dispatch) => {\n  let currentArticlesCounter = 0;\n\n  const fetchArticles = async (articlesPerRequest = 100, counter = 0) => {\n    const response = await api.getArticles(articlesPerRequest, counter);\n    const { articles, articlesCount } = response;\n    dispatch(getArticlesProcess(articles));\n\n    currentArticlesCounter += articles.length;\n    if (currentArticlesCounter < articlesCount) {\n      await fetchArticles(articlesPerRequest, currentArticlesCounter);\n    }\n    if (currentArticlesCounter === articlesCount) {\n      dispatch(getArticlesSuccess());\n    }\n  };\n  await fetchArticles();\n};\n\n// создать пост\nexport const createArticleRequest = createAction('CREATE_ARTICLE_REQUEST');\nexport const createArticleSuccess = createAction('CREATE_ARTICLE_SUCCESS');\nexport const createArticleFailure = createAction('CREATE_ARTICLE_FAILURE');\n\nexport const createArticle = (articleBody, formik) => async (dispatch) => {\n  dispatch(createArticleRequest());\n  try {\n    await api.createArticle(articleBody, formik);\n    dispatch(createArticleSuccess());\n  } catch (error) {\n    dispatch(createArticleFailure());\n  }\n};\n\n// запросить 1 пост\n// этот экшен нужен, чтобы загрузить пост просматриваемый пользователем\n// если он вбивает ссылку на пост в адресной строке\nexport const getOneArticleRequest = createAction('GET_ONE_ARTICLE_REQUEST');\nexport const getOneArticleSuccess = createAction('GET_ONE_ARTICLE_SUCCESS');\nexport const getOneArticleFailure = createAction('GET_ONE_ARTICLE_FAILURE');\n\nexport const getOneArticle = (queryParam) => async (dispatch) => {\n  dispatch(getOneArticleRequest());\n  try {\n    const response = await api.getOneArticle(queryParam);\n    dispatch(getOneArticleSuccess(response));\n  } catch (error) {\n    dispatch(getOneArticleFailure());\n    throw error;\n  }\n};\n\n// изменить пост\nexport const editArticleRequest = createAction('EDIT_ARTICLE_REQUEST');\nexport const editArticleSuccess = createAction('EDIT_ARTICLE_SUCCESS');\nexport const editArticleFailure = createAction('EDIT_ARTICLE_FAILURE');\n\nexport const editArticle = (articleData, queryParam, formik) => async (dispatch) => {\n  dispatch(editArticleRequest());\n  try {\n    await api.editArticle(articleData, queryParam, formik);\n    dispatch(editArticleSuccess());\n  } catch (error) {\n    dispatch(editArticleFailure);\n    throw error;\n  }\n};\n\n// лайк поста\nexport const addLikeRequest = createAction('ADD_LIKE_REQUEST');\nexport const addLikeSuccess = createAction('ADD_LIKE_SUCCESS');\nexport const addLikeFailure = createAction('ADD_LIKE_FAILURE');\n\nexport const refreshLikeInArticlesArray = createAction('REFRESH_LIKE_IN_ARTICLES_ARRAY');\n\nexport const addLike = (likeBody) => async (dispatch) => {\n  if (!likeBody.isRepeatedRequest) {\n    dispatch(refreshLikeInArticlesArray(likeBody.id));\n  }\n\n  // запрещаем отправку на сервер если лайк уже отправлен\n  if (likeBody.isAlreadyRequested) return;\n  dispatch(addLikeRequest(likeBody.id));\n  try {\n    const response = await api.addLike(likeBody);\n    dispatch(addLikeSuccess(response));\n  } catch (error) {\n    dispatch(addLikeFailure());\n    throw error;\n  }\n};\n\n// удалить пост\nexport const removeArticleRequest = createAction('REMOVE_ARTICLE_REQUEST');\nexport const removeArticleSuccess = createAction('REMOVE_ARTICLE_SUCCESS');\nexport const removeArticleFailure = createAction('REMOVE_ARTICLE_FAILURE');\n\nexport const removeArticle = (queryParam) => async (dispatch) => {\n  dispatch(removeArticleRequest());\n  try {\n    await api.removeArticle(queryParam);\n    dispatch(removeArticleSuccess());\n  } catch (error) {\n    dispatch(removeArticleFailure());\n    throw error;\n  }\n};\n\n// обновить посты после создания нового поста / удаления / редактирования\nexport const refreshArticlesRequest = createAction('REFRESH_ARTICLES_REQUEST');\n\n// обновить список постов\nexport const refreshArticles = () => async (dispatch) => {\n  dispatch(createArticleFailure());\n  dispatch(refreshArticlesRequest());\n  dispatch(editArticleFailure());\n  dispatch(getOneArticleFailure());\n  dispatch(removeArticleFailure());\n};\n"]},"metadata":{},"sourceType":"module"}