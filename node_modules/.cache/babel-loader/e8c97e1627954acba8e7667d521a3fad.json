{"ast":null,"code":"import axios from 'axios';\nimport * as routes from './routes'; // проверка на ошибки в полях\n\nexport const checkFieldErrors = (errResponse, formik) => {\n  Object.entries(errResponse).forEach(error => {\n    const [field, message] = error;\n    formik.setFieldError(field, message);\n    formik.setSubmitting(false);\n  });\n}; // проверка на ошибку сети\n\nexport const networkErrorCheck = err => {\n  if (err.message === 'Network Error') {\n    alert('Ошибка соединения'); // eslint-disable-line no-alert\n  }\n}; // проверка ошибки авторизации\n\nexport const signInErrorsCheck = (errResponse, formik) => {\n  if (Object.keys(errResponse).length > 0) {\n    formik.setFieldError('email', 'Invalid login or password');\n    formik.setFieldError('password', 'Invalid login or password');\n    formik.setSubmitting(false);\n  }\n};\n\nconst requestHandler = req => {\n  req.method = 'POST';\n  req.headers['Content-Type'] = 'application/json;charset=utf-8';\n  req.json = true;\n};\n\naxios.incerceptors.request.use(req => requestHandler(req)); // авторизация\n\nexport const signInProcess = async (userData, formik) => {\n  const successHandler = response => {\n    const responseUserData = response.data.user;\n    return {\n      username: responseUserData.username,\n      token: responseUserData.token,\n      isAuthorized: true,\n      userProfileImage: responseUserData.image\n    };\n  };\n\n  const errorHandler = error => {\n    networkErrorCheck(error);\n    signInErrorsCheck(error.response.data.errors, formik);\n    throw error;\n  };\n\n  axios.interceptors.response.use(response => successHandler(response), error => errorHandler(error));\n  const response = await axios({ ...httpHeader,\n    data: JSON.stringify(userData),\n    url: routes.signInUrl\n  });\n}; // регистрация\n\nexport const signUpProcess = async (newUser, formik) => {\n  try {\n    await axios({ ...httpHeader,\n      data: JSON.stringify(newUser),\n      url: routes.signUpUrl\n    });\n    alert('Регистрация прошла успешно'); // eslint-disable-line no-alert\n\n    formik.resetForm();\n  } catch (err) {\n    networkErrorCheck(err);\n    checkFieldErrors(err.response.data.errors, formik);\n    throw err;\n  }\n};","map":{"version":3,"sources":["C:/Users/stalk/jm-blog-platform/src/API/index.js"],"names":["axios","routes","checkFieldErrors","errResponse","formik","Object","entries","forEach","error","field","message","setFieldError","setSubmitting","networkErrorCheck","err","alert","signInErrorsCheck","keys","length","requestHandler","req","method","headers","json","incerceptors","request","use","signInProcess","userData","successHandler","response","responseUserData","data","user","username","token","isAuthorized","userProfileImage","image","errorHandler","errors","interceptors","httpHeader","JSON","stringify","url","signInUrl","signUpProcess","newUser","signUpUrl","resetForm"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport * as routes from './routes';\n\n// проверка на ошибки в полях\nexport const checkFieldErrors = (errResponse, formik) => {\n  Object.entries(errResponse).forEach((error) => {\n    const [field, message] = error;\n    formik.setFieldError(field, message);\n    formik.setSubmitting(false);\n  });\n};\n\n// проверка на ошибку сети\nexport const networkErrorCheck = (err) => {\n  if (err.message === 'Network Error') {\n    alert('Ошибка соединения'); // eslint-disable-line no-alert\n  }\n};\n\n// проверка ошибки авторизации\nexport const signInErrorsCheck = (errResponse, formik) => {\n  if (Object.keys(errResponse).length > 0) {\n    formik.setFieldError('email', 'Invalid login or password');\n    formik.setFieldError('password', 'Invalid login or password');\n    formik.setSubmitting(false);\n  }\n};\n\nconst requestHandler = (req) => {\n  req.method = 'POST';\n  req.headers['Content-Type'] = 'application/json;charset=utf-8';\n  req.json = true;\n}\n\naxios.incerceptors.request.use(\n  (req) => requestHandler(req)\n)\n\n// авторизация\nexport const signInProcess = async (userData, formik) => {\n\n  const successHandler = (response) => {\n    const responseUserData = response.data.user;\n    return {\n      username: responseUserData.username,\n      token: responseUserData.token,\n      isAuthorized: true,\n      userProfileImage: responseUserData.image,\n    };\n  }\n\n  const errorHandler = (error) => {\n    networkErrorCheck(error);\n    signInErrorsCheck(error.response.data.errors, formik);\n    throw error;\n  }\n\n  axios.interceptors.response.use(\n    (response) => successHandler(response),\n    (error) => errorHandler(error),\n  );\n\n\n    const response = await axios({\n      ...httpHeader,\n      data: JSON.stringify(userData),\n      url: routes.signInUrl,\n    });\n\n};\n\n// регистрация\nexport const signUpProcess = async (newUser, formik) => {\n  try {\n    await axios({\n      ...httpHeader,\n      data: JSON.stringify(newUser),\n      url: routes.signUpUrl,\n    });\n    alert('Регистрация прошла успешно'); // eslint-disable-line no-alert\n    formik.resetForm();\n  } catch (err) {\n    networkErrorCheck(err);\n    checkFieldErrors(err.response.data.errors, formik);\n    throw err;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}