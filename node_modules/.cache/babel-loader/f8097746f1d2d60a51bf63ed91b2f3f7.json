{"ast":null,"code":"import { createAction } from 'redux-actions';\nimport * as api from '../../API';\nexport const signUpRequest = createAction('SIGN_UP_REQUEST');\nexport const signUpSuccess = createAction('SIGN_UP_SUCCESS');\nexport const signUpFailure = createAction('SIGN_UP_FAILURE'); // регистрация\n\nexport const signUp = (newUserData, formik) => async dispatch => {\n  dispatch(signUpRequest());\n\n  try {\n    await api.signUpProcess(newUserData, formik);\n    dispatch(signUpSuccess());\n  } catch (err) {\n    dispatch(signUpFailure());\n  }\n};\nexport const signInRequest = createAction('LOG_IN_REQUEST');\nexport const signInSuccess = createAction('LOG_IN_SUCCESS');\nexport const signInFailure = createAction('LOG_IN_FAILURE'); // авторизация\n\nexport const signIn = (userData, formik) => async dispatch => {\n  dispatch(signInRequest());\n\n  try {\n    const responseUserData = await api.signInProcess(userData, formik);\n    dispatch(signInSuccess(responseUserData));\n  } catch (err) {\n    dispatch(signInFailure());\n  }\n};\nexport const logOutSuccess = createAction('LOGOUT_SUCCESS');\nexport const getArticlesSuccess = createAction('GET_ARTICLES_SUCCESS'); // при запросе на сервер статьи возвращаются пачками размером articlesPerRequest\n// в ответе приходит { articles: [], articlesCount: value }\n// массив articles диспатчим, чтобы не ждать от сервера все статьи(вдруг их тысячи)\n// Каждую итерацию сравниваем уже полученное число статей и кол-во на сервере\n// если статьи еще есть, то на фоне делаем запросы для их получения\n\nexport const getArticles = () => async dispatch => {\n  let currentArticlesCounter = 0;\n\n  const fetchArticles = async (articlesPerRequest = 100, counter = 0) => {\n    const response = await api.getArticles(articlesPerRequest, counter);\n    const {\n      articles,\n      articlesCount\n    } = response;\n    dispatch(getArticlesSuccess(articles));\n    currentArticlesCounter += articles.length;\n\n    if (currentArticlesCounter < articlesCount) {\n      await fetchArticles(articlesPerRequest, currentArticlesCounter);\n    }\n  };\n\n  try {\n    await fetchArticles();\n  } catch (error) {\n    console.log(error.response);\n  }\n};","map":{"version":3,"sources":["C:/Users/stalk/jm-blog-platform/src/redux/actions/index.js"],"names":["createAction","api","signUpRequest","signUpSuccess","signUpFailure","signUp","newUserData","formik","dispatch","signUpProcess","err","signInRequest","signInSuccess","signInFailure","signIn","userData","responseUserData","signInProcess","logOutSuccess","getArticlesSuccess","getArticles","currentArticlesCounter","fetchArticles","articlesPerRequest","counter","response","articles","articlesCount","length","error","console","log"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,OAAO,KAAKC,GAAZ,MAAqB,WAArB;AAEA,OAAO,MAAMC,aAAa,GAAGF,YAAY,CAAC,iBAAD,CAAlC;AACP,OAAO,MAAMG,aAAa,GAAGH,YAAY,CAAC,iBAAD,CAAlC;AACP,OAAO,MAAMI,aAAa,GAAGJ,YAAY,CAAC,iBAAD,CAAlC,C,CAEP;;AACA,OAAO,MAAMK,MAAM,GAAG,CAACC,WAAD,EAAcC,MAAd,KAAyB,MAAOC,QAAP,IAAoB;AACjEA,EAAAA,QAAQ,CAACN,aAAa,EAAd,CAAR;;AACA,MAAI;AACF,UAAMD,GAAG,CAACQ,aAAJ,CAAkBH,WAAlB,EAA+BC,MAA/B,CAAN;AACAC,IAAAA,QAAQ,CAACL,aAAa,EAAd,CAAR;AACD,GAHD,CAGE,OAAOO,GAAP,EAAY;AACZF,IAAAA,QAAQ,CAACJ,aAAa,EAAd,CAAR;AACD;AACF,CARM;AAUP,OAAO,MAAMO,aAAa,GAAGX,YAAY,CAAC,gBAAD,CAAlC;AACP,OAAO,MAAMY,aAAa,GAAGZ,YAAY,CAAC,gBAAD,CAAlC;AACP,OAAO,MAAMa,aAAa,GAAGb,YAAY,CAAC,gBAAD,CAAlC,C,CAEP;;AACA,OAAO,MAAMc,MAAM,GAAG,CAACC,QAAD,EAAWR,MAAX,KAAsB,MAAOC,QAAP,IAAoB;AAC9DA,EAAAA,QAAQ,CAACG,aAAa,EAAd,CAAR;;AACA,MAAI;AACF,UAAMK,gBAAgB,GAAG,MAAMf,GAAG,CAACgB,aAAJ,CAAkBF,QAAlB,EAA4BR,MAA5B,CAA/B;AACAC,IAAAA,QAAQ,CAACI,aAAa,CAACI,gBAAD,CAAd,CAAR;AACD,GAHD,CAGE,OAAON,GAAP,EAAY;AACZF,IAAAA,QAAQ,CAACK,aAAa,EAAd,CAAR;AACD;AACF,CARM;AAUP,OAAO,MAAMK,aAAa,GAAGlB,YAAY,CAAC,gBAAD,CAAlC;AAEP,OAAO,MAAMmB,kBAAkB,GAAGnB,YAAY,CAAC,sBAAD,CAAvC,C,CACP;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMoB,WAAW,GAAG,MAAM,MAAOZ,QAAP,IAAoB;AACnD,MAAIa,sBAAsB,GAAG,CAA7B;;AAEA,QAAMC,aAAa,GAAG,OAAOC,kBAAkB,GAAG,GAA5B,EAAiCC,OAAO,GAAG,CAA3C,KAAiD;AACrE,UAAMC,QAAQ,GAAG,MAAMxB,GAAG,CAACmB,WAAJ,CAAgBG,kBAAhB,EAAoCC,OAApC,CAAvB;AACA,UAAM;AAAEE,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA8BF,QAApC;AACAjB,IAAAA,QAAQ,CAACW,kBAAkB,CAACO,QAAD,CAAnB,CAAR;AAEAL,IAAAA,sBAAsB,IAAIK,QAAQ,CAACE,MAAnC;;AACA,QAAIP,sBAAsB,GAAGM,aAA7B,EAA4C;AAC1C,YAAML,aAAa,CAACC,kBAAD,EAAqBF,sBAArB,CAAnB;AACD;AACF,GATD;;AAWA,MAAI;AACF,UAAMC,aAAa,EAAnB;AACD,GAFD,CAEE,OAAOO,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACJ,QAAlB;AACD;AACF,CAnBM","sourcesContent":["import { createAction } from 'redux-actions';\nimport * as api from '../../API';\n\nexport const signUpRequest = createAction('SIGN_UP_REQUEST');\nexport const signUpSuccess = createAction('SIGN_UP_SUCCESS');\nexport const signUpFailure = createAction('SIGN_UP_FAILURE');\n\n// регистрация\nexport const signUp = (newUserData, formik) => async (dispatch) => {\n  dispatch(signUpRequest());\n  try {\n    await api.signUpProcess(newUserData, formik);\n    dispatch(signUpSuccess());\n  } catch (err) {\n    dispatch(signUpFailure());\n  }\n};\n\nexport const signInRequest = createAction('LOG_IN_REQUEST');\nexport const signInSuccess = createAction('LOG_IN_SUCCESS');\nexport const signInFailure = createAction('LOG_IN_FAILURE');\n\n// авторизация\nexport const signIn = (userData, formik) => async (dispatch) => {\n  dispatch(signInRequest());\n  try {\n    const responseUserData = await api.signInProcess(userData, formik);\n    dispatch(signInSuccess(responseUserData));\n  } catch (err) {\n    dispatch(signInFailure());\n  }\n};\n\nexport const logOutSuccess = createAction('LOGOUT_SUCCESS');\n\nexport const getArticlesSuccess = createAction('GET_ARTICLES_SUCCESS');\n// при запросе на сервер статьи возвращаются пачками размером articlesPerRequest\n// в ответе приходит { articles: [], articlesCount: value }\n// массив articles диспатчим, чтобы не ждать от сервера все статьи(вдруг их тысячи)\n// Каждую итерацию сравниваем уже полученное число статей и кол-во на сервере\n// если статьи еще есть, то на фоне делаем запросы для их получения\n\nexport const getArticles = () => async (dispatch) => {\n  let currentArticlesCounter = 0;\n\n  const fetchArticles = async (articlesPerRequest = 100, counter = 0) => {\n    const response = await api.getArticles(articlesPerRequest, counter);\n    const { articles, articlesCount } = response;\n    dispatch(getArticlesSuccess(articles));\n\n    currentArticlesCounter += articles.length;\n    if (currentArticlesCounter < articlesCount) {\n      await fetchArticles(articlesPerRequest, currentArticlesCounter);\n    }\n  };\n\n  try {\n    await fetchArticles();\n  } catch (error) {\n    console.log(error.response);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}