{"ast":null,"code":"import axios from 'axios';\nimport * as routes from './routes'; // проверка на ошибки в полях\n\nexport const checkFieldErrors = (errResponse, formik) => {\n  Object.entries(errResponse).forEach(error => {\n    const [field, message] = error;\n    console.log(field, message[0]);\n    formik.setFieldError(field, message[0]);\n    formik.setSubmitting(false);\n  });\n}; // проверка на ошибку сети\n\nexport const networkErrorCheck = err => {\n  if (err.message === 'Network Error') {\n    alert('Ошибка соединения'); // eslint-disable-line no-alert\n  }\n}; // проверка ошибки авторизации\n\nexport const signInErrorsCheck = (errResponse, formik) => {\n  if (Object.keys(errResponse).length > 0) {\n    formik.setFieldError('email', 'Invalid login or password');\n    formik.setFieldError('password', 'Invalid login or password');\n    formik.setSubmitting(false);\n  }\n};\n\nconst mainRequestHandler = req => {\n  req.headers['Content-Type'] = 'application/json;charset=utf-8';\n  req.json = true;\n  return req;\n};\n\naxios.interceptors.request.use(req => mainRequestHandler(req)); // авторизация\n\nexport const signInProcess = async (userData, formik) => {\n  const localSuccessHandler = response => {\n    const responseUserData = response.data.user;\n    return {\n      username: responseUserData.username,\n      token: responseUserData.token,\n      isAuthorized: true,\n      userProfileImage: responseUserData.image\n    };\n  };\n\n  const localErrorHandler = error => {\n    networkErrorCheck(error);\n    signInErrorsCheck(error.response.data.errors, formik);\n    return Promise.reject(error);\n  };\n\n  axios.interceptors.response.use(response => localSuccessHandler(response), error => localErrorHandler(error));\n  const response = await axios.post(routes.signInUrl, userData);\n  console.log(response);\n  return response;\n}; // регистрация\n\nexport const signUpProcess = async (newUser, formik) => {\n  const localSuccessHandler = response => {\n    alert('Регистрация прошла успешно'); // eslint-disable-line no-alert\n\n    formik.resetForm();\n    return response;\n  };\n\n  const localErrorHandler = error => {\n    networkErrorCheck(error);\n    checkFieldErrors(error.response.data.errors, formik);\n    return Promise.reject(error);\n  };\n\n  axios.interceptors.response.use(response => localSuccessHandler(response), error => localErrorHandler(error));\n  return axios.post(routes.signUpUrl, newUser);\n};","map":{"version":3,"sources":["C:/Users/stalk/jm-blog-platform/src/API/index.js"],"names":["axios","routes","checkFieldErrors","errResponse","formik","Object","entries","forEach","error","field","message","console","log","setFieldError","setSubmitting","networkErrorCheck","err","alert","signInErrorsCheck","keys","length","mainRequestHandler","req","headers","json","interceptors","request","use","signInProcess","userData","localSuccessHandler","response","responseUserData","data","user","username","token","isAuthorized","userProfileImage","image","localErrorHandler","errors","Promise","reject","post","signInUrl","signUpProcess","newUser","resetForm","signUpUrl"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport * as routes from './routes';\n\n// проверка на ошибки в полях\nexport const checkFieldErrors = (errResponse, formik) => {\n  Object.entries(errResponse).forEach((error) => {\n    const [field, message] = error;\n    console.log(field, message[0]);\n    formik.setFieldError(field, message[0]);\n    formik.setSubmitting(false);\n  });\n};\n\n// проверка на ошибку сети\nexport const networkErrorCheck = (err) => {\n  if (err.message === 'Network Error') {\n    alert('Ошибка соединения'); // eslint-disable-line no-alert\n  }\n};\n\n// проверка ошибки авторизации\nexport const signInErrorsCheck = (errResponse, formik) => {\n  if (Object.keys(errResponse).length > 0) {\n    formik.setFieldError('email', 'Invalid login or password');\n    formik.setFieldError('password', 'Invalid login or password');\n    formik.setSubmitting(false);\n  }\n};\n\n\nconst mainRequestHandler = (req) => {\n  req.headers['Content-Type'] = 'application/json;charset=utf-8';\n  req.json = true;\n\n  return req;\n};\n\naxios.interceptors.request.use(\n  (req) => mainRequestHandler(req),\n);\n\n// авторизация\nexport const signInProcess = async (userData, formik) => {\n  const localSuccessHandler = (response) => {\n    const responseUserData = response.data.user;\n    return {\n      username: responseUserData.username,\n      token: responseUserData.token,\n      isAuthorized: true,\n      userProfileImage: responseUserData.image,\n    };\n  };\n\n  const localErrorHandler = (error) => {\n    networkErrorCheck(error);\n    signInErrorsCheck(error.response.data.errors, formik);\n    return Promise.reject(error);\n  };\n\n  axios.interceptors.response.use(\n    (response) => localSuccessHandler(response),\n    (error) => localErrorHandler(error),\n  );\n\n  const response = await axios.post(routes.signInUrl, userData);\n  console.log(response);\n  return response;\n};\n\n// регистрация\nexport const signUpProcess = async (newUser, formik) => {\n  const localSuccessHandler = (response) => {\n    alert('Регистрация прошла успешно'); // eslint-disable-line no-alert\n    formik.resetForm();\n    return response;\n  };\n\n  const localErrorHandler = (error) => {\n    networkErrorCheck(error);\n    checkFieldErrors(error.response.data.errors, formik);\n\n    return Promise.reject(error);\n  };\n\n  axios.interceptors.response.use(\n    (response) => localSuccessHandler(response),\n    (error) => localErrorHandler(error),\n  );\n\n  return axios.post(routes.signUpUrl, newUser);\n};\n"]},"metadata":{},"sourceType":"module"}