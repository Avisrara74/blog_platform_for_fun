{"ast":null,"code":"import axios from 'axios';\nimport * as routes from './routes'; // проверка на ошибки в полях\n\nexport const checkFieldErrors = (errResponse, formik) => {\n  if (Object.entries(errResponse).length > 0) {\n    Object.entries(errResponse).forEach(error => {\n      const [field, message] = error;\n      console.log(field, message[0]);\n      formik.setFieldError(field, message[0]);\n      formik.setSubmitting(false);\n      throw errResponse;\n    });\n  }\n\n  ;\n}; // проверка на ошибку сети\n\nexport const networkErrorCheck = err => {\n  if (err.message === 'Network Error') {\n    alert('Ошибка соединения'); // eslint-disable-line no-alert\n\n    throw err;\n  }\n}; // проверка ошибки авторизации\n\nexport const signInErrorsCheck = (errResponse, formik) => {\n  if (Object.keys(errResponse).length > 0) {\n    formik.setFieldError('email', 'Invalid login or password');\n    formik.setFieldError('password', 'Invalid login or password');\n    formik.setSubmitting(false);\n    throw errResponse;\n  }\n};\n\nconst mainRequestHandler = req => {\n  req.headers['Content-Type'] = 'application/json;charset=utf-8';\n  req.json = true;\n  return req;\n};\n\naxios.interceptors.request.use(req => mainRequestHandler(req)); // авторизация\n\nexport const signInProcess = async (userData, formik) => {\n  const localErrorHandler = error => {\n    networkErrorCheck(error);\n    signInErrorsCheck(error.response.data.errors, formik);\n    return Promise.reject(error);\n  };\n\n  axios.interceptors.response.use(null, error => localErrorHandler(error));\n  const response = await axios.post(routes.signInUrl, userData);\n  const responseUserData = response.data.user;\n  return {\n    username: responseUserData.username,\n    token: responseUserData.token,\n    isAuthorized: true,\n    userProfileImage: responseUserData.image\n  };\n}; // регистрация\n\nexport const signUpProcess = async (newUser, formik) => {\n  const localSuccessHandler = response => {\n    console.log(response);\n    alert('Регистрация прошла успешно'); // eslint-disable-line no-alert\n\n    formik.resetForm();\n    return response;\n  };\n\n  const localErrorHandler = error => {\n    if (error.response.status === 422) {\n      checkFieldErrors(error.response.data.errors, formik);\n    }\n  };\n\n  axios.interceptors.response.use(response => localSuccessHandler(response), error => localErrorHandler(error));\n  return axios.post(routes.signUpUrl, newUser);\n};","map":{"version":3,"sources":["C:/Users/stalk/jm-blog-platform/src/API/index.js"],"names":["axios","routes","checkFieldErrors","errResponse","formik","Object","entries","length","forEach","error","field","message","console","log","setFieldError","setSubmitting","networkErrorCheck","err","alert","signInErrorsCheck","keys","mainRequestHandler","req","headers","json","interceptors","request","use","signInProcess","userData","localErrorHandler","response","data","errors","Promise","reject","post","signInUrl","responseUserData","user","username","token","isAuthorized","userProfileImage","image","signUpProcess","newUser","localSuccessHandler","resetForm","status","signUpUrl"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport * as routes from './routes';\n\n// проверка на ошибки в полях\nexport const checkFieldErrors = (errResponse, formik) => {\n  if (Object.entries(errResponse).length > 0) {\n    Object.entries(errResponse).forEach((error) => {\n      const [field, message] = error;\n      console.log(field, message[0]);\n      formik.setFieldError(field, message[0]);\n      formik.setSubmitting(false);\n      throw errResponse;\n    });\n  };\n};\n\n// проверка на ошибку сети\nexport const networkErrorCheck = (err) => {\n  if (err.message === 'Network Error') {\n    alert('Ошибка соединения'); // eslint-disable-line no-alert\n    throw err;\n  }\n};\n\n// проверка ошибки авторизации\nexport const signInErrorsCheck = (errResponse, formik) => {\n  if (Object.keys(errResponse).length > 0) {\n    formik.setFieldError('email', 'Invalid login or password');\n    formik.setFieldError('password', 'Invalid login or password');\n    formik.setSubmitting(false);\n    throw errResponse;\n  }\n};\n\n\nconst mainRequestHandler = (req) => {\n  req.headers['Content-Type'] = 'application/json;charset=utf-8';\n  req.json = true;\n\n  return req;\n};\n\naxios.interceptors.request.use(\n  (req) => mainRequestHandler(req),\n);\n\n// авторизация\nexport const signInProcess = async (userData, formik) => {\n  const localErrorHandler = (error) => {\n    networkErrorCheck(error);\n    signInErrorsCheck(error.response.data.errors, formik);\n\n    return Promise.reject(error);\n  };\n\n  axios.interceptors.response.use(\n    null,\n    (error) => localErrorHandler(error),\n  );\n\n  const response = await axios.post(routes.signInUrl, userData);\n  const responseUserData = response.data.user;\n  return {\n    username: responseUserData.username,\n    token: responseUserData.token,\n    isAuthorized: true,\n    userProfileImage: responseUserData.image,\n  };\n};\n\n// регистрация\nexport const signUpProcess = async (newUser, formik) => {\n  const localSuccessHandler = (response) => {\n    console.log(response);\n    alert('Регистрация прошла успешно'); // eslint-disable-line no-alert\n    formik.resetForm();\n    return response;\n  };\n\n  const localErrorHandler = (error) => {\n    if (error.response.status === 422) {\n      checkFieldErrors(error.response.data.errors, formik);\n    }\n  };\n\n  axios.interceptors.response.use(\n    (response) => localSuccessHandler(response),\n    (error) => localErrorHandler(error),\n  );\n\n  return axios.post(routes.signUpUrl, newUser);\n};\n"]},"metadata":{},"sourceType":"module"}