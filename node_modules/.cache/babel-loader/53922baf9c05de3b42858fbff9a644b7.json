{"ast":null,"code":"import axios from 'axios';\nimport * as routes from './routes';\nimport { uniqueId } from 'lodash'; // проверка на ошибки в полях\n\nexport const checkFieldErrors = (errResponse, formik) => {\n  Object.entries(errResponse).forEach(error => {\n    const [field, message] = error;\n    formik.setFieldError(field, message[0]);\n    formik.setSubmitting(false);\n  });\n}; // проверка на ошибку сети\n\nexport const networkErrorCheck = err => {\n  if (err.message === 'Network Error') {\n    alert('Ошибка соединения'); // eslint-disable-line no-alert\n  }\n}; // проверка ошибки авторизации\n\nexport const signInErrorsCheck = (errResponse, formik) => {\n  if (Object.keys(errResponse).length > 0) {\n    formik.setFieldError('email', 'Invalid login or password');\n    formik.setFieldError('password', 'Invalid login or password');\n    formik.setSubmitting(false);\n  }\n};\n\nconst mainRequestHandler = req => {\n  req.headers['Content-Type'] = 'application/json;charset=utf-8';\n  req.json = true;\n\n  if (localStorage.token !== undefined) {\n    req.headers.Authorization = `Token ${localStorage.token}`;\n  }\n\n  return req;\n};\n\naxios.interceptors.request.use(req => mainRequestHandler(req)); // авторизация\n\nexport const signInProcess = async (userData, formik) => {\n  try {\n    const response = await axios.post(routes.signInUrl, userData);\n    const responseUserData = response.data.user;\n    return {\n      username: responseUserData.username,\n      token: responseUserData.token,\n      isAuthorized: true,\n      userProfileImage: responseUserData.image\n    };\n  } catch (error) {\n    networkErrorCheck(error);\n\n    if (error.response.status === 422) {\n      signInErrorsCheck(error.response.data.errors, formik);\n    }\n\n    throw error;\n  }\n}; // регистрация\n\nexport const signUpProcess = async (newUser, formik) => {\n  try {\n    await axios.post(routes.signUpUrl, newUser);\n    alert('Регистрация прошла успешно'); // eslint-disable-line no-alert\n  } catch (error) {\n    networkErrorCheck(error);\n\n    if (error.response.status === 422) {\n      checkFieldErrors(error.response.data.errors, formik);\n    }\n\n    throw error;\n  }\n}; // получаем список статей частями (подробнее см redux/actions/index.js getArticles)\n\nexport const getArticles = async (articlesPerRequest, articlesCounter) => {\n  // counter увеличивается на кол-во полученных статей после каждого вызова функции из экшена\n  const localRequestHandler = req => {\n    req.params = {\n      limit: articlesPerRequest,\n      offset: articlesCounter\n    };\n    return req;\n  }; // инициализируем чтобы удалить после запроса\n\n\n  const requestInterceptor = axios.interceptors.request.use(req => localRequestHandler(req));\n\n  try {\n    const response = await axios.get(routes.articlesUrl);\n    const {\n      articles,\n      articlesCount\n    } = response.data;\n    const initialArticlesById = articles.map(el => ({ ...el,\n      id: uniqueId(),\n      tagList: el.tagList.map(tagName => ({\n        id: uniqueId(),\n        title: tagName\n      }))\n    }));\n    const articlesArray = [...initialArticlesById]; // удаляем интерцептор\n\n    axios.interceptors.request.eject(requestInterceptor);\n    return {\n      articles: articlesArray,\n      articlesCount\n    };\n  } catch (error) {\n    console.log(error.response);\n    networkErrorCheck(error);\n    throw error;\n  }\n}; // создание поста\n\nexport const createArticle = async (articleBody, formik) => {\n  try {\n    const response = await axios.post(routes.articlesUrl, articleBody);\n    console.log(response);\n    const {\n      article\n    } = response.data;\n    return { ...article,\n      id: uniqueId(),\n      tagList: article.tagList.map(tagName => ({\n        id: uniqueId(),\n        title: tagName\n      }))\n    };\n  } catch (error) {\n    networkErrorCheck(error);\n\n    if (error.response.status === 422) {\n      checkFieldErrors(error.response.data.errors, formik);\n    }\n\n    throw error;\n  }\n}; // редактирование профиля пользователя\n\nexport const editUserProfile = async (userData, formik) => {\n  try {\n    const response = await axios.put(routes.userProfileUrl, userData);\n    console.log(response);\n    const {\n      user\n    } = response.data;\n    return {\n      username: user.username,\n      userProfileImage: user.image\n    };\n  } catch (error) {\n    networkErrorCheck(error);\n\n    if (error.response.status === 422) {\n      checkFieldErrors(error.response.data.errors, formik);\n    }\n\n    throw error;\n  }\n};\nexport const getOneArticle = async queryParam => {\n  try {\n    const response = await axios.get(routes.oneArticleUrl(queryParam));\n    const {\n      article\n    } = response.data;\n    return { ...article,\n      id: uniqueId(),\n      tagList: article.tagList.map(tagName => ({\n        id: uniqueId(),\n        title: tagName\n      }))\n    };\n  } catch (error) {\n    networkErrorCheck(error);\n  }\n};","map":{"version":3,"sources":["C:/Users/stalk/jm-blog-platform/src/API/index.js"],"names":["axios","routes","uniqueId","checkFieldErrors","errResponse","formik","Object","entries","forEach","error","field","message","setFieldError","setSubmitting","networkErrorCheck","err","alert","signInErrorsCheck","keys","length","mainRequestHandler","req","headers","json","localStorage","token","undefined","Authorization","interceptors","request","use","signInProcess","userData","response","post","signInUrl","responseUserData","data","user","username","isAuthorized","userProfileImage","image","status","errors","signUpProcess","newUser","signUpUrl","getArticles","articlesPerRequest","articlesCounter","localRequestHandler","params","limit","offset","requestInterceptor","get","articlesUrl","articles","articlesCount","initialArticlesById","map","el","id","tagList","tagName","title","articlesArray","eject","console","log","createArticle","articleBody","article","editUserProfile","put","userProfileUrl","getOneArticle","queryParam","oneArticleUrl"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport * as routes from './routes';\nimport { uniqueId } from 'lodash';\n\n// проверка на ошибки в полях\nexport const checkFieldErrors = (errResponse, formik) => {\n  Object.entries(errResponse).forEach((error) => {\n    const [field, message] = error;\n    formik.setFieldError(field, message[0]);\n    formik.setSubmitting(false);\n  });\n};\n\n// проверка на ошибку сети\nexport const networkErrorCheck = (err) => {\n  if (err.message === 'Network Error') {\n    alert('Ошибка соединения'); // eslint-disable-line no-alert\n  }\n};\n\n// проверка ошибки авторизации\nexport const signInErrorsCheck = (errResponse, formik) => {\n  if (Object.keys(errResponse).length > 0) {\n    formik.setFieldError('email', 'Invalid login or password');\n    formik.setFieldError('password', 'Invalid login or password');\n    formik.setSubmitting(false);\n  }\n};\n\n\n\nconst mainRequestHandler = (req) => {\n  req.headers['Content-Type'] = 'application/json;charset=utf-8';\n  req.json = true;\n\n  if (localStorage.token !== undefined) {\n    req.headers.Authorization = `Token ${localStorage.token}`;\n  }\n\n  return req;\n};\n\naxios.interceptors.request.use(\n  (req) => mainRequestHandler(req),\n);\n\n// авторизация\nexport const signInProcess = async (userData, formik) => {\n  try {\n    const response = await axios.post(routes.signInUrl, userData);\n    const responseUserData = response.data.user;\n    return {\n      username: responseUserData.username,\n      token: responseUserData.token,\n      isAuthorized: true,\n      userProfileImage: responseUserData.image,\n    };\n  } catch (error) {\n    networkErrorCheck(error);\n    if (error.response.status === 422) {\n      signInErrorsCheck(error.response.data.errors, formik);\n    }\n    throw error;\n  }\n};\n\n// регистрация\nexport const signUpProcess = async (newUser, formik) => {\n  try {\n    await axios.post(routes.signUpUrl, newUser);\n    alert('Регистрация прошла успешно'); // eslint-disable-line no-alert\n  } catch (error) {\n    networkErrorCheck(error);\n    if (error.response.status === 422) {\n      checkFieldErrors(error.response.data.errors, formik);\n    }\n    throw error;\n  }\n};\n\n\n\n// получаем список статей частями (подробнее см redux/actions/index.js getArticles)\nexport const getArticles = async (articlesPerRequest, articlesCounter) => {\n\n  // counter увеличивается на кол-во полученных статей после каждого вызова функции из экшена\n  const localRequestHandler = (req) => {\n    req.params = { limit: articlesPerRequest, offset: articlesCounter };\n    return req;\n  };\n\n  // инициализируем чтобы удалить после запроса\n  const requestInterceptor = axios.interceptors.request.use(\n    (req) => localRequestHandler(req),\n  );\n\n  try {\n    const response = await axios.get(routes.articlesUrl);\n\n    const { articles, articlesCount } = response.data;\n\n    const initialArticlesById = articles.map((el) => ({\n      ...el,\n      id: uniqueId(),\n      tagList: el.tagList.map((tagName) => ({ id: uniqueId(), title: tagName })),\n    }));\n    const articlesArray = [...initialArticlesById];\n\n    // удаляем интерцептор\n    axios.interceptors.request.eject(requestInterceptor);\n\n    return {\n      articles: articlesArray,\n      articlesCount,\n    };\n  } catch (error) {\n    console.log(error.response);\n    networkErrorCheck(error);\n    throw error;\n  }\n}\n\n// создание поста\nexport const createArticle = async (articleBody, formik) => {\n  try {\n    const response = await axios.post(routes.articlesUrl, articleBody);\n\n    console.log(response);\n    const { article } = response.data;\n\n    return {\n      ...article,\n      id: uniqueId(),\n      tagList: article.tagList.map((tagName) => ({ id: uniqueId(), title: tagName })),\n    };\n  } catch (error) {\n    networkErrorCheck(error);\n    if (error.response.status === 422) {\n      checkFieldErrors(error.response.data.errors, formik);\n    }\n    throw error;\n  }\n}\n\n// редактирование профиля пользователя\nexport const editUserProfile = async (userData, formik) => {\n  try {\n    const response = await axios.put(routes.userProfileUrl, userData);\n\n    console.log(response);\n    const { user } = response.data;\n    return {\n      username: user.username,\n      userProfileImage: user.image,\n    };\n  } catch (error) {\n    networkErrorCheck(error);\n    if (error.response.status === 422) {\n      checkFieldErrors(error.response.data.errors, formik);\n    }\n    throw error;\n  }\n}\n\nexport const getOneArticle = async (queryParam) => {\n  try {\n    const response = await axios.get(routes.oneArticleUrl(queryParam));\n\n    const { article } = response.data;\n\n    return {\n      ...article,\n      id: uniqueId(),\n      tagList: article.tagList.map((tagName) => ({ id: uniqueId(), title: tagName })),\n    };\n  } catch (error) {\n    networkErrorCheck(error);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}