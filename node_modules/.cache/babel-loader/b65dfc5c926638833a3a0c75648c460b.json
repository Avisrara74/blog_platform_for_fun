{"ast":null,"code":"import axios from 'axios';\nimport * as routes from './routes'; // проверка на ошибки в полях\n\nexport const checkFieldErrors = (errResponse, formik) => {\n  Object.entries(errResponse).forEach(error => {\n    const [field, message] = error;\n    console.log(field);\n    formik.setFieldError(field, message);\n    formik.setSubmitting(false);\n  });\n}; // проверка на ошибку сети\n\nexport const networkErrorCheck = err => {\n  if (err.message === 'Network Error') {\n    alert('Ошибка соединения'); // eslint-disable-line no-alert\n  }\n}; // проверка ошибки авторизации\n\nexport const signInErrorsCheck = (errResponse, formik) => {\n  if (Object.keys(errResponse).length > 0) {\n    formik.setFieldError('email', 'Invalid login or password');\n    formik.setFieldError('password', 'Invalid login or password');\n    formik.setSubmitting(false);\n  }\n};\n\nconst mainRequestHandler = req => {\n  req.headers['Content-Type'] = 'application/json;charset=utf-8';\n  req.json = true;\n  return req;\n};\n\naxios.interceptors.request.use(req => mainRequestHandler(req));\n\nconst mainErrorHandler = error => {\n  networkErrorCheck(error);\n  return Promise.reject(error);\n};\n\naxios.interceptors.response.use(req => req, err => mainErrorHandler(err)); // авторизация\n\nexport const signInProcess = async (userData, formik) => {\n  const localSuccessHandler = response => {\n    const responseUserData = response.data.user;\n    return {\n      username: responseUserData.username,\n      token: responseUserData.token,\n      isAuthorized: true,\n      userProfileImage: responseUserData.image\n    };\n  };\n\n  const localErrorHandler = error => {\n    signInErrorsCheck(error.response.data.errors, formik);\n    throw error;\n  };\n\n  axios.interceptors.response.use(response => localSuccessHandler(response), error => localErrorHandler(error));\n  return axios.post(routes.signInUrl, userData);\n}; // регистрация\n\nexport const signUpProcess = async (newUser, formik) => {\n  const localSuccessHandler = response => {\n    alert('Регистрация прошла успешно'); // eslint-disable-line no-alert\n\n    formik.resetForm();\n    return response;\n  };\n\n  const localErrorHandler = error => {\n    checkFieldErrors(error.response.data.errors, formik);\n    console.log(error.response.data.errors);\n    return Promise.reject(error);\n  };\n\n  axios.interceptors.request.use(response => response, error => localErrorHandler(error));\n  axios.interceptors.response.use(response => localSuccessHandler(response));\n  return axios.post(routes.signUpUrl, newUser);\n};","map":{"version":3,"sources":["C:/Users/stalk/jm-blog-platform/src/API/index.js"],"names":["axios","routes","checkFieldErrors","errResponse","formik","Object","entries","forEach","error","field","message","console","log","setFieldError","setSubmitting","networkErrorCheck","err","alert","signInErrorsCheck","keys","length","mainRequestHandler","req","headers","json","interceptors","request","use","mainErrorHandler","Promise","reject","response","signInProcess","userData","localSuccessHandler","responseUserData","data","user","username","token","isAuthorized","userProfileImage","image","localErrorHandler","errors","post","signInUrl","signUpProcess","newUser","resetForm","signUpUrl"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport * as routes from './routes';\n\n// проверка на ошибки в полях\nexport const checkFieldErrors = (errResponse, formik) => {\n  Object.entries(errResponse).forEach((error) => {\n    const [field, message] = error;\n    console.log(field);\n    formik.setFieldError(field, message);\n    formik.setSubmitting(false);\n  });\n};\n\n// проверка на ошибку сети\nexport const networkErrorCheck = (err) => {\n  if (err.message === 'Network Error') {\n    alert('Ошибка соединения'); // eslint-disable-line no-alert\n  }\n};\n\n// проверка ошибки авторизации\nexport const signInErrorsCheck = (errResponse, formik) => {\n  if (Object.keys(errResponse).length > 0) {\n    formik.setFieldError('email', 'Invalid login or password');\n    formik.setFieldError('password', 'Invalid login or password');\n    formik.setSubmitting(false);\n  }\n};\n\n\nconst mainRequestHandler = (req) => {\n  req.headers['Content-Type'] = 'application/json;charset=utf-8';\n  req.json = true;\n\n  return req;\n};\n\naxios.interceptors.request.use(\n  (req) => mainRequestHandler(req),\n);\n\nconst mainErrorHandler = (error) => {\n  networkErrorCheck(error);\n\n  return Promise.reject(error);\n};\n\naxios.interceptors.response.use(\n  (req) => req,\n  (err) => mainErrorHandler(err),\n);\n\n// авторизация\nexport const signInProcess = async (userData, formik) => {\n  const localSuccessHandler = (response) => {\n    const responseUserData = response.data.user;\n    return {\n      username: responseUserData.username,\n      token: responseUserData.token,\n      isAuthorized: true,\n      userProfileImage: responseUserData.image,\n    };\n  };\n\n  const localErrorHandler = (error) => {\n    signInErrorsCheck(error.response.data.errors, formik);\n    throw error;\n  };\n\n  axios.interceptors.response.use(\n    (response) => localSuccessHandler(response),\n    (error) => localErrorHandler(error),\n  );\n\n  return axios.post(routes.signInUrl, userData);\n};\n\n// регистрация\nexport const signUpProcess = async (newUser, formik) => {\n  const localSuccessHandler = (response) => {\n    alert('Регистрация прошла успешно'); // eslint-disable-line no-alert\n    formik.resetForm();\n    return response;\n  };\n\n  const localErrorHandler = (error) => {\n    checkFieldErrors(error.response.data.errors, formik);\n    console.log(error.response.data.errors);\n    return Promise.reject(error);\n  };\n\n  axios.interceptors.request.use(\n    (response) => response,\n    (error) => localErrorHandler(error),\n  );\n\n  axios.interceptors.response.use(\n    (response) => localSuccessHandler(response),\n  );\n\n  return axios.post(routes.signUpUrl, newUser);\n};\n"]},"metadata":{},"sourceType":"module"}