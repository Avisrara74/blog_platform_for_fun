{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\stalk\\\\jm-blog-platform\\\\src\\\\components\\\\edit-article\\\\index.js\";\nimport React, { useEffect } from 'react';\nimport { uniqueId } from 'lodash';\nimport { connect } from 'react-redux';\nimport { useFormik } from 'formik';\nimport { useHistory } from 'react-router';\nimport { mainUrl } from '../../routes';\nimport { Button, Input } from 'antd';\nimport propTypes from 'prop-types';\nimport { renderErrorMessage, renderLoader } from '../../helper';\nimport * as Yup from 'yup';\nimport 'antd/dist/antd.css';\nimport * as actions from '../../redux/actions';\nimport { FormItem, FormArticle, FormTitle, FormItemTagsWrap, FormAddTagButton, FormRemoveTagButton, FormItemTagsTitle, FormItemTag, ArticlesTag } from '../../styled-components';\nimport { useParams } from 'react-router-dom';\nconst formSubmitButtonStyles = {\n  height: 40,\n  maxWidth: 320,\n  width: '100%'\n};\nconst formAddTagInputStyles = {\n  maxWidth: 300,\n  width: '100%',\n  borderRadius: 4\n};\nconst markdownStyles = {\n  flexGrow: 1\n};\nconst formItems = [{\n  id: uniqueId(),\n  title: 'Title',\n  name: 'title',\n  placeholder: 'Title',\n  type: 'text'\n}, {\n  id: uniqueId(),\n  title: 'Short description',\n  name: 'description',\n  placeholder: 'Description',\n  type: 'text'\n}];\nconst formikInicialValues = {\n  title: '',\n  description: '',\n  body: '',\n  tagText: '',\n  tagList: []\n};\nconst formikValidationSchema = Yup.object({\n  title: Yup.string().required('required'),\n  description: Yup.string().required('required'),\n  body: Yup.string().required('required')\n});\n\nconst mapStateToProps = state => {\n  const {\n    userData,\n    oneArticle,\n    oneArticleState,\n    editArticleState\n  } = state;\n  return {\n    username: userData.username,\n    isOneArticleReady: oneArticleState === 'finished',\n    isArticleChanged: editArticleState === 'finished',\n    oneArticle\n  };\n};\n\nconst actionCreators = {\n  editArticle: actions.createArticle,\n  getOneArticle: actions.getOneArticle\n};\n\nconst EditArticle = props => {\n  const {\n    isArticleChanged,\n    username,\n    getOneArticle,\n    oneArticle,\n    isOneArticleReady\n  } = props;\n  const {\n    slug\n  } = useParams();\n  const validSlug = slug.slice(1, slug.length);\n\n  const handleOnEditArticle = async formik => {\n    const {\n      editArticle\n    } = props;\n    const {\n      title,\n      description,\n      body,\n      tagList\n    } = formik.values;\n    const tags = tagList.map(tag => tag.value);\n    const articleBody = {\n      title,\n      description,\n      body,\n      tagList: tags\n    };\n    editArticle(articleBody, formik);\n  };\n\n  const formik = useFormik({\n    initialValues: formikInicialValues,\n    validationSchema: formikValidationSchema,\n    onSubmit: () => {\n      handleOnEditArticle(formik);\n    }\n  });\n\n  const setFormikValues = article => {\n    const {\n      author,\n      description,\n      tagList,\n      title,\n      body\n    } = article; // const isCurrentUserAuthor = (username === author.username);\n\n    formik.setFieldValue('title', title);\n    formik.setFieldValue('description', description);\n    formik.setFieldValue('body', body);\n    formik.setFieldValue('tagList', tagList);\n  };\n\n  useEffect(() => {\n    getOneArticle(validSlug);\n    setFormikValues(oneArticle);\n  }, [oneArticle]);\n  useEffect(() => {\n    if (isArticleChanged) {\n      redirectToHome();\n    }\n  }, [isArticleChanged]);\n  let history = useHistory();\n\n  const redirectToHome = () => {\n    history.push(mainUrl);\n  };\n\n  const handleOnAddTag = () => {\n    const {\n      tagText,\n      tagList\n    } = formik.values;\n\n    if (tagText.trim().length === 0) {\n      formik.setFieldValue('tagText', '');\n      return;\n    }\n\n    const initialNewTag = {\n      id: uniqueId(),\n      value: tagText\n    };\n    const newTagsArray = [...tagList, initialNewTag];\n    formik.setFieldValue('tagList', newTagsArray);\n    formik.setFieldValue('tagText', '');\n  };\n\n  const handleOnRemoveTag = id => () => {\n    const {\n      tagList\n    } = formik.values;\n    const newTagsArray = tagList.filter(tag => tag.id !== id);\n    formik.setFieldValue('tags', newTagsArray);\n  };\n\n  const handleOnClearTagInput = () => {\n    formik.setFieldValue('tagText', '');\n  };\n\n  const renderTags = () => {\n    const {\n      tagList\n    } = formik.values;\n    if (tagList.length === 0) return null;\n    return tagList.map(tag => {\n      const {\n        id,\n        value\n      } = tag;\n      return /*#__PURE__*/React.createElement(FormItemTag, {\n        key: id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        style: formAddTagInputStyles,\n        onChange: formik.handleChange,\n        value: value,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(FormRemoveTagButton, {\n        onClick: handleOnRemoveTag(id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }\n      }, \"Delete\"));\n    });\n  };\n\n  const renderInputs = () => formItems.map(formItem => /*#__PURE__*/React.createElement(FormItem, {\n    key: formItem.id,\n    htmlFor: formItem.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }, formItem.title, /*#__PURE__*/React.createElement(Input, {\n    type: formItem.type,\n    placeholder: formItem.placeholder,\n    id: formItem.name,\n    name: formItem.name,\n    onChange: formik.handleChange,\n    value: formik.values[formItem.name],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }), renderErrorMessage(formik, formItem.name)));\n\n  const renderForm = () => {\n    if (!isOneArticleReady) return renderLoader();\n    return /*#__PURE__*/React.createElement(FormArticle, {\n      onSubmit: formik.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(FormTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }\n    }, \"Edit Article\"), renderInputs(), /*#__PURE__*/React.createElement(FormItem, {\n      htmlFor: \"body\",\n      style: markdownStyles,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }\n    }, \"Text\", /*#__PURE__*/React.createElement(Input.TextArea, {\n      name: \"body\",\n      id: \"body\",\n      onChange: formik.handleChange,\n      value: formik.values.body,\n      rows: 8,\n      allowClear: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }\n    }), renderErrorMessage(formik, 'body')), /*#__PURE__*/React.createElement(FormItemTagsWrap, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormItemTagsTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }\n    }, \"Tags\"), renderTags(), /*#__PURE__*/React.createElement(FormItemTag, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      name: \"tagText\",\n      id: \"tagText\",\n      placeholder: \"write tag\",\n      style: formAddTagInputStyles,\n      onChange: formik.handleChange,\n      value: formik.values.tagText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(FormRemoveTagButton, {\n      onClick: handleOnClearTagInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }\n    }, \"Delete\"), /*#__PURE__*/React.createElement(FormAddTagButton, {\n      onClick: handleOnAddTag,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 13\n      }\n    }, \"Add tag\"))), /*#__PURE__*/React.createElement(Button, {\n      htmlType: \"submit\",\n      type: \"primary\",\n      onClick: formik.handleSubmit,\n      style: formSubmitButtonStyles,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }\n    }, \"Send\"));\n  };\n\n  return renderForm();\n};\n\nEditArticle.propTypes = {};\nEditArticle.defaultProps = {};\nexport default connect(mapStateToProps, actionCreators)(EditArticle);","map":{"version":3,"sources":["C:/Users/stalk/jm-blog-platform/src/components/edit-article/index.js"],"names":["React","useEffect","uniqueId","connect","useFormik","useHistory","mainUrl","Button","Input","propTypes","renderErrorMessage","renderLoader","Yup","actions","FormItem","FormArticle","FormTitle","FormItemTagsWrap","FormAddTagButton","FormRemoveTagButton","FormItemTagsTitle","FormItemTag","ArticlesTag","useParams","formSubmitButtonStyles","height","maxWidth","width","formAddTagInputStyles","borderRadius","markdownStyles","flexGrow","formItems","id","title","name","placeholder","type","formikInicialValues","description","body","tagText","tagList","formikValidationSchema","object","string","required","mapStateToProps","state","userData","oneArticle","oneArticleState","editArticleState","username","isOneArticleReady","isArticleChanged","actionCreators","editArticle","createArticle","getOneArticle","EditArticle","props","slug","validSlug","slice","length","handleOnEditArticle","formik","values","tags","map","tag","value","articleBody","initialValues","validationSchema","onSubmit","setFormikValues","article","author","setFieldValue","redirectToHome","history","push","handleOnAddTag","trim","initialNewTag","newTagsArray","handleOnRemoveTag","filter","handleOnClearTagInput","renderTags","handleChange","renderInputs","formItem","renderForm","handleSubmit","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { uniqueId } from 'lodash';\nimport { connect } from 'react-redux';\nimport { useFormik } from 'formik';\nimport { useHistory } from 'react-router';\nimport { mainUrl } from '../../routes';\nimport { Button, Input } from 'antd';\nimport propTypes from 'prop-types';\nimport { renderErrorMessage, renderLoader } from '../../helper';\nimport * as Yup from 'yup';\nimport 'antd/dist/antd.css';\nimport * as actions from '../../redux/actions';\n\nimport {\n  FormItem,\n  FormArticle,\n  FormTitle,\n  FormItemTagsWrap,\n  FormAddTagButton,\n  FormRemoveTagButton,\n  FormItemTagsTitle,\n  FormItemTag, ArticlesTag,\n} from '../../styled-components';\nimport { useParams } from 'react-router-dom';\n\n\nconst formSubmitButtonStyles = {\n  height: 40,\n  maxWidth: 320,\n  width: '100%',\n};\n\nconst formAddTagInputStyles = {\n  maxWidth: 300,\n  width: '100%',\n  borderRadius: 4,\n};\n\nconst markdownStyles = {\n  flexGrow: 1,\n}\n\nconst formItems = [\n  {\n    id: uniqueId(), title: 'Title', name: 'title', placeholder: 'Title', type: 'text',\n  },\n  {\n    id: uniqueId(), title: 'Short description', name: 'description', placeholder: 'Description', type: 'text',\n  },\n];\n\nconst formikInicialValues = {\n  title: '',\n  description: '',\n  body: '',\n  tagText: '',\n  tagList: [],\n};\n\nconst formikValidationSchema = Yup.object({\n  title: Yup.string()\n    .required('required'),\n  description: Yup.string()\n    .required('required'),\n  body: Yup.string()\n    .required('required'),\n});\n\nconst mapStateToProps = (state) => {\n  const { userData, oneArticle, oneArticleState, editArticleState } = state;\n\n  return {\n    username: userData.username,\n    isOneArticleReady: (oneArticleState === 'finished'),\n    isArticleChanged: editArticleState === 'finished',\n    oneArticle,\n  };\n};\n\nconst actionCreators = {\n  editArticle: actions.createArticle,\n  getOneArticle: actions.getOneArticle,\n};\n\nconst EditArticle = (props) => {\n  const { isArticleChanged, username, getOneArticle, oneArticle, isOneArticleReady } = props;\n  const { slug } = useParams();\n  const validSlug = slug.slice(1, slug.length);\n\n  const handleOnEditArticle = async (formik) => {\n    const { editArticle } = props;\n    const { title, description, body, tagList } = formik.values;\n    const tags = tagList.map((tag) => tag.value);\n\n    const articleBody = {\n      title, description, body, tagList: tags,\n    };\n    editArticle(articleBody, formik);\n  }\n\n  const formik = useFormik({\n    initialValues: formikInicialValues,\n    validationSchema: formikValidationSchema,\n    onSubmit: () => {\n      handleOnEditArticle(formik);\n    },\n  });\n\n  const setFormikValues = (article) => {\n    const { author, description, tagList, title, body } = article;\n    // const isCurrentUserAuthor = (username === author.username);\n    formik.setFieldValue('title', title);\n    formik.setFieldValue('description', description);\n    formik.setFieldValue('body', body);\n    formik.setFieldValue('tagList', tagList);\n  }\n\n  useEffect(() => {\n    getOneArticle(validSlug);\n    setFormikValues(oneArticle)\n  }, [oneArticle]);\n\n  useEffect(() => {\n    if (isArticleChanged) {\n      redirectToHome();\n    }\n  }, [isArticleChanged]);\n\n\n  let history = useHistory();\n  const redirectToHome = () => {\n    history.push(mainUrl);\n  };\n\n\n  const handleOnAddTag = () => {\n    const { tagText, tagList } = formik.values;\n    if (tagText.trim().length === 0) {\n      formik.setFieldValue('tagText', '');\n      return;\n    }\n\n    const initialNewTag = {\n      id: uniqueId(),\n      value: tagText,\n    };\n\n    const newTagsArray = [...tagList, initialNewTag];\n    formik.setFieldValue('tagList', newTagsArray);\n    formik.setFieldValue('tagText', '');\n  };\n\n  const handleOnRemoveTag = (id) => () => {\n    const { tagList } = formik.values;\n\n    const newTagsArray = tagList.filter((tag) => tag.id !== id);\n\n    formik.setFieldValue('tags', newTagsArray);\n  };\n\n  const handleOnClearTagInput = () => {\n    formik.setFieldValue('tagText', '');\n  };\n\n  const renderTags = () => {\n    const { tagList } = formik.values;\n    if (tagList.length === 0) return null;\n\n    return tagList.map((tag) => {\n      const { id, value } = tag;\n\n      return (\n        <FormItemTag key={id}>\n          <Input\n            style={formAddTagInputStyles}\n            onChange={formik.handleChange}\n            value={value}\n          />\n          <FormRemoveTagButton onClick={handleOnRemoveTag(id)}>Delete</FormRemoveTagButton>\n        </FormItemTag>\n      );\n    });\n  };\n\n  const renderInputs = () => (\n    formItems.map((formItem) => (\n      <FormItem key={formItem.id} htmlFor={formItem.name}>\n        {formItem.title}\n        <Input\n          type={formItem.type}\n          placeholder={formItem.placeholder}\n          id={formItem.name}\n          name={formItem.name}\n          onChange={formik.handleChange}\n          value={formik.values[formItem.name]}\n        />\n        {renderErrorMessage(formik, formItem.name)}\n      </FormItem>\n    ))\n  );\n\n  const renderForm = () => {\n    if (!isOneArticleReady) return renderLoader();\n\n    return (\n      <FormArticle onSubmit={formik.handleSubmit}>\n        <FormTitle>Edit Article</FormTitle>\n\n        {renderInputs()}\n\n        <FormItem htmlFor=\"body\" style={markdownStyles}>\n          Text\n          <Input.TextArea\n            name=\"body\"\n            id=\"body\"\n            onChange={formik.handleChange}\n            value={formik.values.body}\n            rows={8}\n            allowClear\n          />\n          {renderErrorMessage(formik, 'body')}\n        </FormItem>\n\n        <FormItemTagsWrap>\n          <FormItemTagsTitle>Tags</FormItemTagsTitle>\n          {renderTags()}\n          <FormItemTag>\n            <Input\n              name=\"tagText\"\n              id=\"tagText\"\n              placeholder=\"write tag\"\n              style={formAddTagInputStyles}\n              onChange={formik.handleChange}\n              value={formik.values.tagText}\n            />\n            <FormRemoveTagButton onClick={handleOnClearTagInput}>Delete</FormRemoveTagButton>\n            <FormAddTagButton onClick={handleOnAddTag}>Add tag</FormAddTagButton>\n          </FormItemTag>\n        </FormItemTagsWrap>\n\n        <Button\n          htmlType=\"submit\"\n          type=\"primary\"\n          onClick={formik.handleSubmit}\n          style={formSubmitButtonStyles}\n        >\n          Send\n        </Button>\n      </FormArticle>\n    );\n  };\n\n  return renderForm();\n};\n\nEditArticle.propTypes = {\n\n};\n\nEditArticle.defaultProps = {\n\n};\n\nexport default connect(mapStateToProps, actionCreators)(EditArticle);\n"]},"metadata":{},"sourceType":"module"}