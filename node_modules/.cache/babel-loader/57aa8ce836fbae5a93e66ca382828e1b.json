{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\stalk\\\\jm-blog-platform\\\\src\\\\components\\\\edit-article\\\\index.js\";\nimport React, { useEffect } from 'react';\nimport { uniqueId } from 'lodash';\nimport { connect } from 'react-redux';\nimport { useFormik } from 'formik';\nimport { useHistory } from 'react-router';\nimport { mainUrl } from '../../routes';\nimport { Button, Input } from 'antd';\nimport propTypes from 'prop-types';\nimport { renderErrorMessage, renderLoader } from '../../helper';\nimport * as Yup from 'yup';\nimport 'antd/dist/antd.css';\nimport * as actions from '../../redux/actions';\nimport { FormItem, FormArticle, FormTitle, FormItemTagsWrap, FormAddTagButton, FormRemoveTagButton, FormItemTagsTitle, FormItemTag, ArticlesTag } from '../../styled-components';\nimport { useParams } from 'react-router-dom';\nconst formSubmitButtonStyles = {\n  height: 40,\n  maxWidth: 320,\n  width: '100%'\n};\nconst formAddTagInputStyles = {\n  maxWidth: 300,\n  width: '100%',\n  borderRadius: 4\n};\nconst markdownStyles = {\n  flexGrow: 1\n};\nconst formItems = [{\n  id: uniqueId(),\n  title: 'Title',\n  name: 'title',\n  placeholder: 'Title',\n  type: 'text'\n}, {\n  id: uniqueId(),\n  title: 'Short description',\n  name: 'description',\n  placeholder: 'Description',\n  type: 'text'\n}];\nconst formikValidationSchema = Yup.object({\n  title: Yup.string().required('required'),\n  description: Yup.string().required('required'),\n  body: Yup.string().required('required')\n});\n\nconst mapStateToProps = state => {\n  const {\n    articles,\n    userData,\n    oneArticle,\n    oneArticleState,\n    editArticleState\n  } = state;\n  const currentArticle = articles.length === 0 ? oneArticle : articles;\n  return {\n    articles,\n    username: userData.username,\n    isOneArticleReady: oneArticleState === 'finished',\n    isArticleChanged: editArticleState === 'finished',\n    currentArticle\n  };\n};\n\nconst actionCreators = {\n  editArticle: actions.createArticle,\n  getOneArticle: actions.getOneArticle\n};\n\nconst EditArticle = props => {\n  const formikInicialValues = {\n    title: '',\n    description: '',\n    body: '',\n    tagText: '',\n    tagList: ''\n  };\n  const formik = useFormik({\n    initialValues: formikInicialValues,\n    validationSchema: formikValidationSchema,\n    onSubmit: () => {\n      handleOnEditArticle(formik);\n    }\n  });\n  const {\n    isArticleChanged,\n    articles,\n    username,\n    getOneArticle,\n    currentArticle,\n    isOneArticleReady\n  } = props;\n  const {\n    slug\n  } = useParams();\n  const validSlug = slug.slice(1, slug.length);\n  let history = useHistory();\n\n  const redirectToHome = () => {\n    history.push(mainUrl);\n  };\n\n  let article; // если пользователь переходит по URL, то грузим нужный article с сервера\n\n  if (!Array.isArray(currentArticle)) {\n    if (!isOneArticleReady) return renderLoader();\n    article = currentArticle;\n  } // если по ссылке со списка артайклов, то берем из массива нужный\n\n\n  if (Array.isArray(currentArticle)) {\n    article = currentArticle.find(el => el.slug === validSlug);\n  }\n\n  const {\n    author,\n    description,\n    tagList,\n    title,\n    body\n  } = article;\n  const isCurrentUserAuthor = username === author.username;\n\n  const handleOnEditArticle = async formik => {\n    const {\n      editArticle\n    } = props;\n    const {\n      title,\n      description,\n      body,\n      tagList\n    } = formik.values;\n    const tags = tagList.map(tag => tag.value);\n    const articleBody = {\n      title,\n      description,\n      body,\n      tagList: tags\n    };\n    editArticle(articleBody, formik);\n  };\n\n  const handleOnAddTag = () => {\n    const {\n      tagText,\n      tagList\n    } = formik.values;\n\n    if (tagText.trim().length === 0) {\n      formik.setFieldValue('tagText', '');\n      return;\n    }\n\n    const initialNewTag = {\n      id: uniqueId(),\n      value: tagText\n    };\n    const newTagsArray = [...tagList, initialNewTag];\n    formik.setFieldValue('tagList', newTagsArray);\n    formik.setFieldValue('tagText', '');\n  };\n\n  const handleOnRemoveTag = id => () => {\n    const {\n      tagList\n    } = formik.values;\n    const newTagsArray = tagList.filter(tag => tag.id !== id);\n    formik.setFieldValue('tags', newTagsArray);\n  };\n\n  const handleOnClearTagInput = () => {\n    formik.setFieldValue('tagText', '');\n  };\n\n  const renderTags = () => {\n    const {\n      tagList\n    } = formik.values;\n    if (tagList.length === 0) return null;\n    return tagList.map(tag => {\n      const {\n        id,\n        value\n      } = tag;\n      return /*#__PURE__*/React.createElement(FormItemTag, {\n        key: id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        style: formAddTagInputStyles,\n        onChange: formik.handleChange,\n        value: value,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(FormRemoveTagButton, {\n        onClick: handleOnRemoveTag(id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }\n      }, \"Delete\"));\n    });\n  };\n  /*useEffect(() => {\n    if (articles.length === 0) {\n      getOneArticle(validSlug);\n    }\n  }, []);\n   useEffect(() => {\n    if (isArticleChanged) {\n      redirectToHome();\n    }\n  }, [isArticleChanged]);*/\n\n\n  const renderInputs = () => formItems.map(formItem => /*#__PURE__*/React.createElement(FormItem, {\n    key: formItem.id,\n    htmlFor: formItem.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }\n  }, formItem.title, /*#__PURE__*/React.createElement(Input, {\n    type: formItem.type,\n    placeholder: formItem.placeholder,\n    id: formItem.name,\n    name: formItem.name,\n    onChange: formik.handleChange,\n    value: formik.values[formItem.name],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }), renderErrorMessage(formik, formItem.name)));\n\n  return /*#__PURE__*/React.createElement(FormArticle, {\n    onSubmit: formik.handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }\n  }, \"Edit Article\"), renderInputs(), /*#__PURE__*/React.createElement(FormItem, {\n    htmlFor: \"body\",\n    style: markdownStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }\n  }, \"Text\", /*#__PURE__*/React.createElement(Input.TextArea, {\n    name: \"body\",\n    id: \"body\",\n    onChange: formik.handleChange,\n    value: formik.values.body,\n    rows: 8,\n    allowClear: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }\n  }), renderErrorMessage(formik, 'body')), /*#__PURE__*/React.createElement(FormItemTagsWrap, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormItemTagsTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }\n  }, \"Tags\"), renderTags(), /*#__PURE__*/React.createElement(FormItemTag, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: \"tagText\",\n    id: \"tagText\",\n    placeholder: \"write tag\",\n    style: formAddTagInputStyles,\n    onChange: formik.handleChange,\n    value: formik.values.tagText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FormRemoveTagButton, {\n    onClick: handleOnClearTagInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 11\n    }\n  }, \"Delete\"), /*#__PURE__*/React.createElement(FormAddTagButton, {\n    onClick: handleOnAddTag,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 11\n    }\n  }, \"Add tag\"))), /*#__PURE__*/React.createElement(Button, {\n    htmlType: \"submit\",\n    type: \"primary\",\n    onClick: formik.handleSubmit,\n    style: formSubmitButtonStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }\n  }, \"Send\"));\n};\n\nEditArticle.propTypes = {};\nEditArticle.defaultProps = {};\nexport default connect(mapStateToProps, actionCreators)(EditArticle);","map":{"version":3,"sources":["C:/Users/stalk/jm-blog-platform/src/components/edit-article/index.js"],"names":["React","useEffect","uniqueId","connect","useFormik","useHistory","mainUrl","Button","Input","propTypes","renderErrorMessage","renderLoader","Yup","actions","FormItem","FormArticle","FormTitle","FormItemTagsWrap","FormAddTagButton","FormRemoveTagButton","FormItemTagsTitle","FormItemTag","ArticlesTag","useParams","formSubmitButtonStyles","height","maxWidth","width","formAddTagInputStyles","borderRadius","markdownStyles","flexGrow","formItems","id","title","name","placeholder","type","formikValidationSchema","object","string","required","description","body","mapStateToProps","state","articles","userData","oneArticle","oneArticleState","editArticleState","currentArticle","length","username","isOneArticleReady","isArticleChanged","actionCreators","editArticle","createArticle","getOneArticle","EditArticle","props","formikInicialValues","tagText","tagList","formik","initialValues","validationSchema","onSubmit","handleOnEditArticle","slug","validSlug","slice","history","redirectToHome","push","article","Array","isArray","find","el","author","isCurrentUserAuthor","values","tags","map","tag","value","articleBody","handleOnAddTag","trim","setFieldValue","initialNewTag","newTagsArray","handleOnRemoveTag","filter","handleOnClearTagInput","renderTags","handleChange","renderInputs","formItem","handleSubmit","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { uniqueId } from 'lodash';\nimport { connect } from 'react-redux';\nimport { useFormik } from 'formik';\nimport { useHistory } from 'react-router';\nimport { mainUrl } from '../../routes';\nimport { Button, Input } from 'antd';\nimport propTypes from 'prop-types';\nimport { renderErrorMessage, renderLoader } from '../../helper';\nimport * as Yup from 'yup';\nimport 'antd/dist/antd.css';\nimport * as actions from '../../redux/actions';\n\nimport {\n  FormItem,\n  FormArticle,\n  FormTitle,\n  FormItemTagsWrap,\n  FormAddTagButton,\n  FormRemoveTagButton,\n  FormItemTagsTitle,\n  FormItemTag, ArticlesTag,\n} from '../../styled-components';\nimport { useParams } from 'react-router-dom';\n\n\nconst formSubmitButtonStyles = {\n  height: 40,\n  maxWidth: 320,\n  width: '100%',\n};\n\nconst formAddTagInputStyles = {\n  maxWidth: 300,\n  width: '100%',\n  borderRadius: 4,\n};\n\nconst markdownStyles = {\n  flexGrow: 1,\n}\n\nconst formItems = [\n  {\n    id: uniqueId(), title: 'Title', name: 'title', placeholder: 'Title', type: 'text',\n  },\n  {\n    id: uniqueId(), title: 'Short description', name: 'description', placeholder: 'Description', type: 'text',\n  },\n];\n\nconst formikValidationSchema = Yup.object({\n  title: Yup.string()\n    .required('required'),\n  description: Yup.string()\n    .required('required'),\n  body: Yup.string()\n    .required('required'),\n});\n\nconst mapStateToProps = (state) => {\n  const { articles, userData, oneArticle, oneArticleState, editArticleState } = state;\n\n  const currentArticle = (articles.length === 0) ? oneArticle : articles;\n  return {\n    articles,\n    username: userData.username,\n    isOneArticleReady: (oneArticleState === 'finished'),\n    isArticleChanged: editArticleState === 'finished',\n    currentArticle,\n  };\n};\n\nconst actionCreators = {\n  editArticle: actions.createArticle,\n  getOneArticle: actions.getOneArticle,\n};\n\nconst EditArticle = (props) => {\n  const formikInicialValues = {\n    title: '',\n    description: '',\n    body: '',\n    tagText: '',\n    tagList: '',\n  };\n  const formik = useFormik({\n    initialValues: formikInicialValues,\n    validationSchema: formikValidationSchema,\n    onSubmit: () => {\n      handleOnEditArticle(formik);\n    },\n  });\n  const { isArticleChanged, articles, username, getOneArticle, currentArticle, isOneArticleReady } = props;\n  const { slug } = useParams();\n  const validSlug = slug.slice(1, slug.length);\n\n\n  let history = useHistory();\n  const redirectToHome = () => {\n    history.push(mainUrl);\n  };\n\n  let article;\n  // если пользователь переходит по URL, то грузим нужный article с сервера\n  if (!Array.isArray(currentArticle)) {\n    if (!isOneArticleReady) return renderLoader();\n    article = currentArticle;\n  }\n\n  // если по ссылке со списка артайклов, то берем из массива нужный\n  if (Array.isArray(currentArticle)) {\n    article = currentArticle.find((el) => el.slug === validSlug);\n  }\n\n  const { author, description, tagList, title, body } = article;\n  const isCurrentUserAuthor = (username === author.username);\n\n\n\n\n  const handleOnEditArticle = async (formik) => {\n    const { editArticle } = props;\n    const { title, description, body, tagList } = formik.values;\n    const tags = tagList.map((tag) => tag.value);\n\n    const articleBody = {\n      title, description, body, tagList: tags,\n    };\n    editArticle(articleBody, formik);\n  }\n\n  const handleOnAddTag = () => {\n    const { tagText, tagList } = formik.values;\n    if (tagText.trim().length === 0) {\n      formik.setFieldValue('tagText', '');\n      return;\n    }\n\n    const initialNewTag = {\n      id: uniqueId(),\n      value: tagText,\n    };\n\n    const newTagsArray = [...tagList, initialNewTag];\n    formik.setFieldValue('tagList', newTagsArray);\n    formik.setFieldValue('tagText', '');\n  };\n\n  const handleOnRemoveTag = (id) => () => {\n    const { tagList } = formik.values;\n\n    const newTagsArray = tagList.filter((tag) => tag.id !== id);\n\n    formik.setFieldValue('tags', newTagsArray);\n  };\n\n  const handleOnClearTagInput = () => {\n    formik.setFieldValue('tagText', '');\n  };\n\n  const renderTags = () => {\n    const { tagList } = formik.values;\n    if (tagList.length === 0) return null;\n\n    return tagList.map((tag) => {\n      const { id, value } = tag;\n\n      return (\n        <FormItemTag key={id}>\n          <Input\n            style={formAddTagInputStyles}\n            onChange={formik.handleChange}\n            value={value}\n          />\n          <FormRemoveTagButton onClick={handleOnRemoveTag(id)}>Delete</FormRemoveTagButton>\n        </FormItemTag>\n      );\n    });\n  };\n\n  /*useEffect(() => {\n    if (articles.length === 0) {\n      getOneArticle(validSlug);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (isArticleChanged) {\n      redirectToHome();\n    }\n  }, [isArticleChanged]);*/\n\n  const renderInputs = () => (\n    formItems.map((formItem) => (\n      <FormItem key={formItem.id} htmlFor={formItem.name}>\n        {formItem.title}\n        <Input\n          type={formItem.type}\n          placeholder={formItem.placeholder}\n          id={formItem.name}\n          name={formItem.name}\n          onChange={formik.handleChange}\n          value={formik.values[formItem.name]}\n        />\n        {renderErrorMessage(formik, formItem.name)}\n      </FormItem>\n    ))\n  );\n\n  return (\n    <FormArticle onSubmit={formik.handleSubmit}>\n      <FormTitle>Edit Article</FormTitle>\n\n      {renderInputs()}\n\n      <FormItem htmlFor=\"body\" style={markdownStyles}>\n        Text\n        <Input.TextArea\n          name=\"body\"\n          id=\"body\"\n          onChange={formik.handleChange}\n          value={formik.values.body}\n          rows={8}\n          allowClear\n        />\n        {renderErrorMessage(formik, 'body')}\n      </FormItem>\n\n      <FormItemTagsWrap>\n        <FormItemTagsTitle>Tags</FormItemTagsTitle>\n        {renderTags()}\n        <FormItemTag>\n          <Input\n            name=\"tagText\"\n            id=\"tagText\"\n            placeholder=\"write tag\"\n            style={formAddTagInputStyles}\n            onChange={formik.handleChange}\n            value={formik.values.tagText}\n          />\n          <FormRemoveTagButton onClick={handleOnClearTagInput}>Delete</FormRemoveTagButton>\n          <FormAddTagButton onClick={handleOnAddTag}>Add tag</FormAddTagButton>\n        </FormItemTag>\n      </FormItemTagsWrap>\n\n      <Button\n        htmlType=\"submit\"\n        type=\"primary\"\n        onClick={formik.handleSubmit}\n        style={formSubmitButtonStyles}\n      >\n        Send\n      </Button>\n    </FormArticle>\n  );\n};\n\nEditArticle.propTypes = {\n\n};\n\nEditArticle.defaultProps = {\n\n};\n\nexport default connect(mapStateToProps, actionCreators)(EditArticle);\n"]},"metadata":{},"sourceType":"module"}