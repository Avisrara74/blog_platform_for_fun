{"ast":null,"code":"import axios from 'axios';\nimport * as routes from './routes'; // проверка на ошибки в полях\n\nexport const checkFieldErrors = (errResponse, formik) => {\n  Object.entries(errResponse).forEach(error => {\n    const [field, message] = error;\n    formik.setFieldError(field, message);\n    formik.setSubmitting(false);\n  });\n}; // проверка на ошибку сети\n\nexport const networkErrorCheck = err => {\n  if (err.message === 'Network Error') {\n    alert('Ошибка соединения'); // eslint-disable-line no-alert\n  }\n}; // проверка ошибки авторизации\n\nexport const signInErrorsCheck = (errResponse, formik) => {\n  console.log(errResponse);\n\n  if (Object.keys(errResponse).length > 0) {\n    formik.setFieldError('email', 'Неверный логин или пароль');\n    formik.setFieldError('password', 'Неверный логин или пароль');\n    formik.setSubmitting(false);\n  }\n};\nconst httpHeader = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json;charset=utf-8'\n  },\n  json: true\n}; // авторизация\n\nexport const signInProcess = async (userData, formik) => {\n  try {\n    const response = await axios({ ...httpHeader,\n      data: JSON.stringify(userData),\n      url: routes.signInUrl\n    });\n    const responseUserData = response.data.user;\n    return {\n      username: responseUserData.username,\n      token: responseUserData.token,\n      isAuthorized: true\n    };\n  } catch (err) {\n    networkErrorCheck(err);\n    signInErrorsCheck(err.response.data.errors, formik);\n    throw err;\n  }\n}; // регистрация\n\nexport const signUpProcess = async (newUser, formik) => {\n  try {\n    await axios({ ...httpHeader,\n      data: JSON.stringify(newUser),\n      url: routes.signUpUrl\n    });\n    alert('Регистрация прошла успешно'); // eslint-disable-line no-alert\n\n    formik.resetForm();\n  } catch (err) {\n    networkErrorCheck(err);\n    checkFieldErrors(err.response.data.errors, formik);\n    throw err;\n  }\n};","map":{"version":3,"sources":["C:/Users/stalk/jm-blog-platform/src/API/index.js"],"names":["axios","routes","checkFieldErrors","errResponse","formik","Object","entries","forEach","error","field","message","setFieldError","setSubmitting","networkErrorCheck","err","alert","signInErrorsCheck","console","log","keys","length","httpHeader","method","headers","json","signInProcess","userData","response","data","JSON","stringify","url","signInUrl","responseUserData","user","username","token","isAuthorized","errors","signUpProcess","newUser","signUpUrl","resetForm"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport * as routes from './routes';\n\n// проверка на ошибки в полях\nexport const checkFieldErrors = (errResponse, formik) => {\n  Object.entries(errResponse).forEach((error) => {\n    const [field, message] = error;\n    formik.setFieldError(field, message);\n    formik.setSubmitting(false);\n  });\n};\n\n// проверка на ошибку сети\nexport const networkErrorCheck = (err) => {\n  if (err.message === 'Network Error') {\n    alert('Ошибка соединения'); // eslint-disable-line no-alert\n  }\n};\n\n// проверка ошибки авторизации\nexport const signInErrorsCheck = (errResponse, formik) => {\n  console.log(errResponse);\n  if (Object.keys(errResponse).length > 0) {\n    formik.setFieldError('email', 'Неверный логин или пароль');\n    formik.setFieldError('password', 'Неверный логин или пароль');\n    formik.setSubmitting(false);\n  }\n};\n\nconst httpHeader = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json;charset=utf-8',\n  },\n  json: true,\n};\n\n// авторизация\nexport const signInProcess = async (userData, formik) => {\n  try {\n    const response = await axios({\n      ...httpHeader,\n      data: JSON.stringify(userData),\n      url: routes.signInUrl,\n    });\n\n    const responseUserData = response.data.user;\n\n    return {\n      username: responseUserData.username,\n      token: responseUserData.token,\n      isAuthorized: true,\n    };\n  } catch (err) {\n    networkErrorCheck(err);\n    signInErrorsCheck(err.response.data.errors, formik);\n    throw err;\n  }\n};\n\n// регистрация\nexport const signUpProcess = async (newUser, formik) => {\n  try {\n    await axios({\n      ...httpHeader,\n      data: JSON.stringify(newUser),\n      url: routes.signUpUrl,\n    });\n    alert('Регистрация прошла успешно'); // eslint-disable-line no-alert\n    formik.resetForm();\n  } catch (err) {\n    networkErrorCheck(err);\n    checkFieldErrors(err.response.data.errors, formik);\n    throw err;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}